// Cache utilities for Fix Fog√µes system

/**
 * Limpa todos os dados de cache e localStorage que podem estar causando conflitos
 */
export const clearAllCache = async (): Promise<void> => {
  try {
    console.log('üßπ [CacheUtils] Iniciando limpeza completa de cache...');

    // 1. Limpar localStorage (exceto dados essenciais)
    const allKeys = Object.keys(localStorage);

    // Definir chaves essenciais que NUNCA devem ser removidas
    const essentialKeys = [
      'mapboxToken',
      // Preservar TODOS os tokens de auth do Supabase
      ...allKeys.filter(key => key.startsWith('sb-') && key.includes('-auth-token'))
    ];

    allKeys.forEach(key => {
      // Verificar se √© uma chave essencial
      const isEssential = essentialKeys.includes(key) ||
                         (key.startsWith('sb-') && key.includes('-auth-token'));

      if (!isEssential) {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è [CacheUtils] Removido localStorage: ${key}`);
      } else {
        console.log(`üîí [CacheUtils] Preservando chave essencial: ${key}`);
      }
    });

    // 2. Limpar sessionStorage
    sessionStorage.clear();
    console.log('üóëÔ∏è [CacheUtils] SessionStorage limpo');

    // 3. Limpar cache do navegador (Service Worker)
    if ('caches' in window) {
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames.map(cacheName => {
          console.log(`üóëÔ∏è [CacheUtils] Removendo cache: ${cacheName}`);
          return caches.delete(cacheName);
        })
      );
    }

    // 4. Limpar dados tempor√°rios (PRESERVAR AUTH TOKENS)
    const tempKeys = allKeys.filter(key =>
      (key.includes('temp') ||
       key.includes('cache') ||
       key.includes('old')) &&
      !key.includes('-auth-token') // NUNCA remover tokens de auth v√°lidos
    );

    tempKeys.forEach(key => {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è [CacheUtils] Removido dados tempor√°rios: ${key}`);
    });

    // Preservar explicitamente tokens de auth do Supabase
    const authTokens = allKeys.filter(key =>
      key.startsWith('sb-') && key.includes('-auth-token')
    );
    authTokens.forEach(key => {
      console.log(`üîí [CacheUtils] Preservando token de auth: ${key}`);
    });

    console.log('‚úÖ [CacheUtils] Limpeza completa de cache finalizada');
  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro ao limpar cache:', error);
  }
};

/**
 * Limpa apenas dados relacionados √†s notifica√ß√µes
 */
export const clearNotificationCache = (): void => {
  try {
    console.log('üîî [CacheUtils] Limpando cache de notifica√ß√µes...');
    
    const notificationKeys = Object.keys(localStorage).filter(key =>
      key.includes('notification') ||
      key.includes('realtime') ||
      key.includes('pwa-notification')
    );

    notificationKeys.forEach(key => {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è [CacheUtils] Removido notification key: ${key}`);
    });

    console.log('‚úÖ [CacheUtils] Cache de notifica√ß√µes limpo');
  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro ao limpar cache de notifica√ß√µes:', error);
  }
};

/**
 * For√ßa refresh completo da p√°gina sem cache
 */
export const forceRefresh = (): void => {
  console.log('üîÑ [CacheUtils] For√ßando refresh sem cache...');
  window.location.reload();
};

/**
 * Detecta se h√° problemas de cache baseado em sintomas comuns
 */
export const detectCacheIssues = (): { hasIssues: boolean; issues: string[] } => {
  const issues: string[] = [];

  try {
    console.log('üîç [CacheUtils] Iniciando detec√ß√£o de problemas de cache...');

    // 1. Verificar inconsist√™ncias de autentica√ß√£o
    const sessionData = localStorage.getItem('eletrofix_session');
    const supabaseAuth = Object.keys(localStorage).find(key => key.includes('sb-'));

    if (sessionData && !supabaseAuth) {
      // Toda sess√£o local deve ter autentica√ß√£o Supabase correspondente
      issues.push('Sess√£o local sem autentica√ß√£o Supabase');
      console.warn('‚ö†Ô∏è [CacheUtils] Detectado: Sess√£o local sem auth Supabase');
    }

    // 2. Verificar dados corrompidos ou malformados
    const allKeys = Object.keys(localStorage);
    allKeys.forEach(key => {
      try {
        const value = localStorage.getItem(key);
        if (value && (key.includes('session') || key.includes('auth') || key.includes('user'))) {
          JSON.parse(value); // Tentar parsear dados importantes
        }
      } catch (e) {
        issues.push(`Dados corrompidos na chave: ${key}`);
        console.warn(`‚ö†Ô∏è [CacheUtils] Dados corrompidos em: ${key}`);
      }
    });

    // 3. Verificar cache excessivo
    const cacheKeys = allKeys.filter(key =>
      key.includes('cache') ||
      key.includes('temp') ||
      key.includes('old') ||
      key.includes('backup')
    );

    if (cacheKeys.length > 15) {
      issues.push(`Muitas chaves de cache antigas (${cacheKeys.length})`);
      console.warn(`‚ö†Ô∏è [CacheUtils] Detectado: ${cacheKeys.length} chaves de cache antigas`);
    }

    // 4. Verificar tamanho excessivo do localStorage
    let totalSize = 0;
    allKeys.forEach(key => {
      const value = localStorage.getItem(key);
      if (value) totalSize += value.length;
    });

    if (totalSize > 5 * 1024 * 1024) { // 5MB
      issues.push(`LocalStorage muito grande (${Math.round(totalSize / 1024 / 1024)}MB)`);
      console.warn(`‚ö†Ô∏è [CacheUtils] LocalStorage muito grande: ${Math.round(totalSize / 1024 / 1024)}MB`);
    }

    // 5. Verificar chaves duplicadas ou conflitantes
    const duplicatePatterns = ['notification', 'realtime', 'socket', 'connection'];
    duplicatePatterns.forEach(pattern => {
      const matchingKeys = allKeys.filter(key => key.toLowerCase().includes(pattern));
      if (matchingKeys.length > 3) {
        issues.push(`Muitas chaves relacionadas a ${pattern} (${matchingKeys.length})`);
        console.warn(`‚ö†Ô∏è [CacheUtils] Muitas chaves ${pattern}: ${matchingKeys.length}`);
      }
    });

    // 6. Verificar vers√£o do sistema
    const systemVersion = localStorage.getItem('system_version');
    const currentVersion = '3.1.0'; // Vers√£o atual do Fix Fog√µes

    if (systemVersion && systemVersion !== currentVersion) {
      issues.push(`Vers√£o do sistema desatualizada (${systemVersion} vs ${currentVersion})`);
      console.warn(`‚ö†Ô∏è [CacheUtils] Vers√£o desatualizada: ${systemVersion}`);
    }

    const hasIssues = issues.length > 0;

    if (hasIssues) {
      console.warn(`‚ö†Ô∏è [CacheUtils] ${issues.length} problema(s) detectado(s):`, issues);
    } else {
      console.log('‚úÖ [CacheUtils] Nenhum problema de cache detectado');
    }

    return { hasIssues, issues };

  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro ao detectar problemas de cache:', error);
    return { hasIssues: true, issues: ['Erro na detec√ß√£o de problemas'] };
  }
};

/**
 * Limpa dados espec√≠ficos de autentica√ß√£o corrompidos (PRESERVA TOKENS V√ÅLIDOS)
 */
export const clearAuthCache = (): void => {
  try {
    console.log('üîê [CacheUtils] Limpando cache de autentica√ß√£o...');

    // Remover apenas sess√£o local (n√£o tokens do Supabase)
    localStorage.removeItem('eletrofix_session');

    // NUNCA remover tokens de auth v√°lidos do Supabase
    const allKeys = Object.keys(localStorage);
    const validAuthTokens = allKeys.filter(key =>
      key.startsWith('sb-') && key.includes('-auth-token')
    );

    validAuthTokens.forEach(key => {
      console.log(`üîí [CacheUtils] Preservando token v√°lido: ${key}`);
    });

    console.log('‚úÖ [CacheUtils] Cache de autentica√ß√£o limpo (tokens preservados)');
  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro ao limpar cache de autentica√ß√£o:', error);
  }
};

/**
 * Diagn√≥stico completo do estado do cache
 */
export const diagnoseCacheState = (): void => {
  console.log('üîç [CacheUtils] === DIAGN√ìSTICO COMPLETO DO SISTEMA ===');

  try {
    // 1. LocalStorage
    const localStorageKeys = Object.keys(localStorage);
    console.log(`üì¶ LocalStorage: ${localStorageKeys.length} chaves`);

    // Agrupar chaves por categoria
    const categories = {
      auth: localStorageKeys.filter(k => k.includes('auth') || k.includes('sb-') || k.includes('session')),
      notifications: localStorageKeys.filter(k => k.includes('notification') || k.includes('realtime')),
      cache: localStorageKeys.filter(k => k.includes('cache') || k.includes('temp')),
      system: localStorageKeys.filter(k => k.includes('system') || k.includes('version') || k.includes('config')),
      other: localStorageKeys.filter(k =>
        !k.includes('auth') && !k.includes('sb-') && !k.includes('session') &&
        !k.includes('notification') && !k.includes('realtime') &&
        !k.includes('cache') && !k.includes('temp') &&
        !k.includes('system') && !k.includes('version') && !k.includes('config')
      )
    };

    Object.entries(categories).forEach(([category, keys]) => {
      if (keys.length > 0) {
        console.log(`  üìÇ ${category.toUpperCase()}: ${keys.length} chaves`);
        keys.forEach(key => {
          const value = localStorage.getItem(key);
          const size = value ? Math.round(value.length / 1024) : 0;
          console.log(`    - ${key}: ${size}KB`);
        });
      }
    });

    // 2. SessionStorage
    const sessionStorageKeys = Object.keys(sessionStorage);
    console.log(`üì¶ SessionStorage: ${sessionStorageKeys.length} chaves`);

    // 3. Dados espec√≠ficos importantes
    const session = localStorage.getItem('eletrofix_session');
    if (session) {
      try {
        const parsed = JSON.parse(session);
        console.log('üë§ Sess√£o atual:', {
          id: parsed.id,
          email: parsed.email,
          role: parsed.role,
          timestamp: new Date(parsed.timestamp || Date.now()).toLocaleString()
        });
      } catch (e) {
        console.error('‚ùå Sess√£o corrompida:', session.substring(0, 100) + '...');
      }
    } else {
      console.log('üë§ Nenhuma sess√£o encontrada');
    }

    // 4. Verificar problemas detalhados
    const { hasIssues, issues } = detectCacheIssues();
    console.log(`üö® Problemas detectados: ${hasIssues ? 'SIM' : 'N√ÉO'}`);
    if (hasIssues) {
      issues.forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue}`);
      });
    }

    // 5. Estat√≠sticas gerais
    let totalSize = 0;
    localStorageKeys.forEach(key => {
      const value = localStorage.getItem(key);
      if (value) totalSize += value.length;
    });

    console.log(`üìä Estat√≠sticas:`);
    console.log(`  - Total de chaves: ${localStorageKeys.length}`);
    console.log(`  - Tamanho total: ${Math.round(totalSize / 1024)}KB`);
    console.log(`  - Vers√£o do sistema: ${localStorage.getItem('system_version') || 'n√£o definida'}`);
    console.log(`  - √öltima limpeza: ${localStorage.getItem('last_cache_cleanup') || 'nunca'}`);

  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro no diagn√≥stico:', error);
  }

  console.log('üîç [CacheUtils] === FIM DO DIAGN√ìSTICO ===');
};

/**
 * Detec√ß√£o autom√°tica e corre√ß√£o de problemas de cache
 */
export const autoFixCacheIssues = async (): Promise<{ fixed: boolean; actions: string[] }> => {
  const actions: string[] = [];

  try {
    console.log('üîß [CacheUtils] Iniciando corre√ß√£o autom√°tica...');

    const { hasIssues, issues } = detectCacheIssues();

    if (!hasIssues) {
      console.log('‚úÖ [CacheUtils] Nenhum problema encontrado');
      return { fixed: true, actions: ['Nenhuma corre√ß√£o necess√°ria'] };
    }

    // Corre√ß√£o 1: Problema espec√≠fico de sess√£o Supabase
    if (issues.some(issue => issue.includes('Sess√£o local sem autentica√ß√£o Supabase'))) {
      console.log('üîß [CacheUtils] Corrigindo problema de sess√£o Supabase...');

      try {
        // Importar dinamicamente para evitar depend√™ncias circulares
        const { recoverSupabaseSession } = await import('@/utils/sessionRecovery');
        const result = await recoverSupabaseSession();

        if (result.success) {
          actions.push('Sess√£o do Supabase recuperada com sucesso');
          console.log('‚úÖ [CacheUtils] Sess√£o do Supabase recuperada');
        } else {
          // Se n√£o conseguir recuperar, limpar dados locais inconsistentes
          localStorage.removeItem('eletrofix_session');
          actions.push('Dados de sess√£o local inconsistentes removidos');
          console.log('üóëÔ∏è [CacheUtils] Dados de sess√£o local removidos');
        }
      } catch (error) {
        console.error('‚ùå [CacheUtils] Erro ao recuperar sess√£o:', error);
        // Fallback: limpar dados locais
        localStorage.removeItem('eletrofix_session');
        actions.push('Dados de sess√£o local removidos (fallback)');
      }
    }

    // Corre√ß√£o 2: Limpar dados corrompidos
    const allKeys = Object.keys(localStorage);
    allKeys.forEach(key => {
      try {
        const value = localStorage.getItem(key);
        if (value && (key.includes('session') || key.includes('auth') || key.includes('user'))) {
          JSON.parse(value); // Tentar parsear
        }
      } catch (e) {
        localStorage.removeItem(key);
        actions.push(`Removido dado corrompido: ${key}`);
        console.log(`üóëÔ∏è [CacheUtils] Removido dado corrompido: ${key}`);
      }
    });

    // Corre√ß√£o 3: Limpar cache excessivo
    const cacheKeys = allKeys.filter(key =>
      key.includes('cache') ||
      key.includes('temp') ||
      key.includes('old') ||
      key.includes('backup')
    );

    if (cacheKeys.length > 10) {
      cacheKeys.forEach(key => {
        localStorage.removeItem(key);
        actions.push(`Removido cache antigo: ${key}`);
      });
      console.log(`üóëÔ∏è [CacheUtils] Removidos ${cacheKeys.length} caches antigos`);
    }

    // Corre√ß√£o 4: Atualizar vers√£o do sistema
    localStorage.setItem('system_version', '3.1.0');
    localStorage.setItem('last_cache_cleanup', new Date().toISOString());
    actions.push('Vers√£o do sistema atualizada');

    // Corre√ß√£o 5: Limpar notifica√ß√µes duplicadas
    const notificationKeys = allKeys.filter(key => key.includes('notification'));
    if (notificationKeys.length > 5) {
      notificationKeys.slice(5).forEach(key => {
        localStorage.removeItem(key);
        actions.push(`Removida notifica√ß√£o duplicada: ${key}`);
      });
    }

    console.log(`‚úÖ [CacheUtils] Corre√ß√£o autom√°tica conclu√≠da: ${actions.length} a√ß√µes`);
    return { fixed: true, actions };

  } catch (error) {
    console.error('‚ùå [CacheUtils] Erro na corre√ß√£o autom√°tica:', error);
    return { fixed: false, actions: ['Erro na corre√ß√£o autom√°tica'] };
  }
};
