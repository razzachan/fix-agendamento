/**
 * Checklist completo para lan√ßamento do MVP
 */

import { supabase } from '@/integrations/supabase/client';

export interface ChecklistItem {
  id: string;
  category: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  priority: 'low' | 'medium' | 'high' | 'critical';
  automated: boolean;
  checkFunction?: () => Promise<boolean>;
  details?: string;
}

export interface ChecklistCategory {
  name: string;
  items: ChecklistItem[];
  completedCount: number;
  totalCount: number;
  completionRate: number;
}

/**
 * Classe para gerenciar o checklist de lan√ßamento MVP
 */
export class MVPLaunchChecklist {
  private items: ChecklistItem[] = [
    // FUNCIONALIDADES CORE
    {
      id: 'core-auth',
      category: 'Funcionalidades Core',
      title: 'Sistema de Autentica√ß√£o',
      description: 'Login/logout funcionando para todos os roles',
      status: 'pending',
      priority: 'critical',
      automated: true,
      checkFunction: async () => {
        try {
          const { data } = await supabase.auth.getSession();
          return true; // Se chegou at√© aqui, a conex√£o est√° funcionando
        } catch {
          return false;
        }
      }
    },
    {
      id: 'core-orders',
      category: 'Funcionalidades Core',
      title: 'Cria√ß√£o de Ordens de Servi√ßo',
      description: 'Cria√ß√£o manual e convers√£o de agendamentos',
      status: 'pending',
      priority: 'critical',
      automated: true,
      checkFunction: async () => {
        try {
          const { error } = await supabase.from('service_orders').select('*').limit(1);
          return !error;
        } catch {
          return false;
        }
      }
    },
    {
      id: 'core-lifecycle',
      category: 'Funcionalidades Core',
      title: 'Ciclo de Vida das OS',
      description: 'Mudan√ßas de status funcionando corretamente',
      status: 'pending',
      priority: 'critical',
      automated: false
    },
    {
      id: 'core-checkin',
      category: 'Funcionalidades Core',
      title: 'Sistema de Check-in/Check-out',
      description: 'Check-in com valida√ß√£o de geolocaliza√ß√£o',
      status: 'pending',
      priority: 'critical',
      automated: false
    },
    {
      id: 'core-comments',
      category: 'Funcionalidades Core',
      title: 'Sistema de Coment√°rios',
      description: 'Coment√°rios p√∫blicos e internos funcionando',
      status: 'pending',
      priority: 'high',
      automated: true,
      checkFunction: async () => {
        try {
          const { error } = await supabase.from('service_order_comments').select('*').limit(1);
          return !error;
        } catch {
          return false;
        }
      }
    },

    // NOTIFICA√á√ïES
    {
      id: 'notif-system',
      category: 'Notifica√ß√µes',
      title: 'Engine de Notifica√ß√µes',
      description: 'Sistema de notifica√ß√µes funcionando',
      status: 'pending',
      priority: 'high',
      automated: true,
      checkFunction: async () => {
        try {
          const { error } = await supabase.from('notifications').select('*').limit(1);
          return !error;
        } catch {
          return false;
        }
      }
    },
    {
      id: 'notif-triggers',
      category: 'Notifica√ß√µes',
      title: 'Triggers de Notifica√ß√£o',
      description: 'Notifica√ß√µes autom√°ticas em mudan√ßas de status',
      status: 'pending',
      priority: 'medium',
      automated: false
    },

    // DASHBOARDS
    {
      id: 'dash-admin',
      category: 'Dashboards',
      title: 'Dashboard Administrativo',
      description: 'M√©tricas e relat√≥rios funcionando',
      status: 'pending',
      priority: 'high',
      automated: false
    },
    {
      id: 'dash-tech',
      category: 'Dashboards',
      title: 'Dashboard do T√©cnico',
      description: 'Interface do t√©cnico funcional',
      status: 'pending',
      priority: 'high',
      automated: false
    },
    {
      id: 'dash-workshop',
      category: 'Dashboards',
      title: 'Dashboard da Oficina',
      description: 'Interface da oficina funcional',
      status: 'pending',
      priority: 'high',
      automated: false
    },
    {
      id: 'dash-client',
      category: 'Dashboards',
      title: 'Dashboard do Cliente',
      description: 'Interface do cliente funcional',
      status: 'pending',
      priority: 'medium',
      automated: false
    },

    // SEGURAN√áA
    {
      id: 'sec-rls',
      category: 'Seguran√ßa',
      title: 'Row Level Security (RLS)',
      description: 'Pol√≠ticas de seguran√ßa ativas no banco',
      status: 'pending',
      priority: 'critical',
      automated: true,
      checkFunction: async () => {
        try {
          // Tentar acessar dados sem autentica√ß√£o adequada
          const { error } = await supabase.from('service_order_comments').select('*').limit(1);
          // Se houver erro, RLS est√° funcionando
          return !!error;
        } catch {
          return true; // Erro indica que RLS est√° ativo
        }
      }
    },
    {
      id: 'sec-permissions',
      category: 'Seguran√ßa',
      title: 'Sistema de Permiss√µes',
      description: 'Controle de acesso por role funcionando',
      status: 'pending',
      priority: 'critical',
      automated: false
    },

    // PERFORMANCE
    {
      id: 'perf-loading',
      category: 'Performance',
      title: 'Tempos de Carregamento',
      description: 'P√°ginas carregando em menos de 3 segundos',
      status: 'pending',
      priority: 'medium',
      automated: false
    },
    {
      id: 'perf-mobile',
      category: 'Performance',
      title: 'Responsividade Mobile',
      description: 'Interface funcionando bem em dispositivos m√≥veis',
      status: 'pending',
      priority: 'high',
      automated: false
    },

    // DADOS
    {
      id: 'data-backup',
      category: 'Dados',
      title: 'Sistema de Backup',
      description: 'Backups autom√°ticos configurados',
      status: 'pending',
      priority: 'high',
      automated: false
    },
    {
      id: 'data-migration',
      category: 'Dados',
      title: 'Migra√ß√£o de Dados',
      description: 'Dados existentes migrados corretamente',
      status: 'pending',
      priority: 'medium',
      automated: false
    },

    // DOCUMENTA√á√ÉO
    {
      id: 'doc-user',
      category: 'Documenta√ß√£o',
      title: 'Manual do Usu√°rio',
      description: 'Documenta√ß√£o b√°sica para usu√°rios',
      status: 'pending',
      priority: 'medium',
      automated: false
    },
    {
      id: 'doc-admin',
      category: 'Documenta√ß√£o',
      title: 'Manual Administrativo',
      description: 'Documenta√ß√£o para administradores',
      status: 'pending',
      priority: 'low',
      automated: false
    },

    // MONITORAMENTO
    {
      id: 'mon-errors',
      category: 'Monitoramento',
      title: 'Monitoramento de Erros',
      description: 'Sistema de logs e monitoramento ativo',
      status: 'pending',
      priority: 'medium',
      automated: false
    },
    {
      id: 'mon-analytics',
      category: 'Monitoramento',
      title: 'Analytics B√°sico',
      description: 'M√©tricas de uso b√°sicas implementadas',
      status: 'pending',
      priority: 'low',
      automated: false
    }
  ];

  /**
   * Executar verifica√ß√µes automatizadas
   */
  async runAutomatedChecks(): Promise<ChecklistItem[]> {
    console.log('üîç [MVPLaunchChecklist] Executando verifica√ß√µes automatizadas...');
    
    const results: ChecklistItem[] = [];
    
    for (const item of this.items) {
      if (item.automated && item.checkFunction) {
        try {
          console.log(`üß™ Verificando: ${item.title}`);
          item.status = 'in_progress';
          
          const passed = await item.checkFunction();
          item.status = passed ? 'completed' : 'failed';
          item.details = passed ? 'Verifica√ß√£o autom√°tica passou' : 'Verifica√ß√£o autom√°tica falhou';
          
          console.log(`${passed ? '‚úÖ' : '‚ùå'} ${item.title}: ${item.details}`);
          
        } catch (error) {
          item.status = 'failed';
          item.details = `Erro na verifica√ß√£o: ${error}`;
          console.error(`‚ùå ${item.title}: ${item.details}`);
        }
        
        results.push({ ...item });
      }
    }
    
    console.log(`‚úÖ [MVPLaunchChecklist] ${results.length} verifica√ß√µes automatizadas conclu√≠das`);
    return results;
  }

  /**
   * Obter checklist organizado por categoria
   */
  getChecklistByCategory(): ChecklistCategory[] {
    const categories = new Map<string, ChecklistItem[]>();
    
    // Agrupar itens por categoria
    this.items.forEach(item => {
      if (!categories.has(item.category)) {
        categories.set(item.category, []);
      }
      categories.get(item.category)!.push(item);
    });
    
    // Converter para formato de categoria
    return Array.from(categories.entries()).map(([name, items]) => {
      const completedCount = items.filter(item => item.status === 'completed').length;
      const totalCount = items.length;
      const completionRate = totalCount > 0 ? (completedCount / totalCount) * 100 : 0;
      
      return {
        name,
        items,
        completedCount,
        totalCount,
        completionRate
      };
    });
  }

  /**
   * Obter estat√≠sticas gerais
   */
  getOverallStats() {
    const total = this.items.length;
    const completed = this.items.filter(item => item.status === 'completed').length;
    const failed = this.items.filter(item => item.status === 'failed').length;
    const pending = this.items.filter(item => item.status === 'pending').length;
    const inProgress = this.items.filter(item => item.status === 'in_progress').length;
    
    const critical = this.items.filter(item => item.priority === 'critical').length;
    const criticalCompleted = this.items.filter(item => 
      item.priority === 'critical' && item.status === 'completed'
    ).length;
    
    const completionRate = total > 0 ? (completed / total) * 100 : 0;
    const criticalCompletionRate = critical > 0 ? (criticalCompleted / critical) * 100 : 0;
    
    return {
      total,
      completed,
      failed,
      pending,
      inProgress,
      completionRate,
      critical,
      criticalCompleted,
      criticalCompletionRate,
      readyForLaunch: criticalCompletionRate >= 90 && completionRate >= 80
    };
  }

  /**
   * Marcar item como completo
   */
  markItemCompleted(itemId: string, details?: string): boolean {
    const item = this.items.find(i => i.id === itemId);
    if (item) {
      item.status = 'completed';
      if (details) item.details = details;
      return true;
    }
    return false;
  }

  /**
   * Marcar item como falhado
   */
  markItemFailed(itemId: string, details?: string): boolean {
    const item = this.items.find(i => i.id === itemId);
    if (item) {
      item.status = 'failed';
      if (details) item.details = details;
      return true;
    }
    return false;
  }

  /**
   * Gerar relat√≥rio de prontid√£o
   */
  generateReadinessReport(): string {
    const stats = this.getOverallStats();
    const categories = this.getChecklistByCategory();
    
    let report = '# üöÄ RELAT√ìRIO DE PRONTID√ÉO PARA LAN√áAMENTO MVP\n\n';
    
    report += `## üìä ESTAT√çSTICAS GERAIS\n`;
    report += `- **Progresso Geral:** ${stats.completionRate.toFixed(1)}%\n`;
    report += `- **Itens Cr√≠ticos:** ${stats.criticalCompletionRate.toFixed(1)}% (${stats.criticalCompleted}/${stats.critical})\n`;
    report += `- **Status:** ${stats.readyForLaunch ? '‚úÖ PRONTO PARA LAN√áAMENTO' : '‚ö†Ô∏è NECESSITA AJUSTES'}\n\n`;
    
    report += `### Distribui√ß√£o de Status:\n`;
    report += `- ‚úÖ **Completo:** ${stats.completed}\n`;
    report += `- ‚ùå **Falhado:** ${stats.failed}\n`;
    report += `- ‚è≥ **Pendente:** ${stats.pending}\n`;
    report += `- üîÑ **Em Progresso:** ${stats.inProgress}\n\n`;
    
    categories.forEach(category => {
      report += `## ${category.name} (${category.completionRate.toFixed(1)}%)\n`;
      
      category.items.forEach(item => {
        const icon = item.status === 'completed' ? '‚úÖ' : 
                   item.status === 'failed' ? '‚ùå' : 
                   item.status === 'in_progress' ? 'üîÑ' : '‚è≥';
        
        const priority = item.priority === 'critical' ? 'üî¥' : 
                        item.priority === 'high' ? 'üü°' : 
                        item.priority === 'medium' ? 'üîµ' : '‚ö™';
        
        report += `${icon} ${priority} **${item.title}**\n`;
        report += `   ${item.description}\n`;
        if (item.details) {
          report += `   *${item.details}*\n`;
        }
        report += '\n';
      });
    });
    
    return report;
  }
}
