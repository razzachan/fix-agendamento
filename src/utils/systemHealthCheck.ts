// System Health Check - Detec√ß√£o e corre√ß√£o autom√°tica de problemas
import { detectCacheIssues, autoFixCacheIssues, diagnoseCacheState } from './cacheUtils';

interface HealthCheckResult {
  isHealthy: boolean;
  issues: string[];
  autoFixed: boolean;
  actions: string[];
  needsManualIntervention: boolean;
}

/**
 * Executa verifica√ß√£o completa de sa√∫de do sistema
 */
export const runSystemHealthCheck = async (): Promise<HealthCheckResult> => {
  console.log('üè• [SystemHealth] Iniciando verifica√ß√£o de sa√∫de do sistema...');
  
  try {
    // 1. Verificar problemas de cache
    const cacheCheck = detectCacheIssues();
    
    let autoFixed = false;
    let actions: string[] = [];
    let needsManualIntervention = false;

    if (cacheCheck.hasIssues) {
      console.log(`‚ö†Ô∏è [SystemHealth] ${cacheCheck.issues.length} problema(s) de cache detectado(s)`);
      
      // Tentar corre√ß√£o autom√°tica para problemas n√£o cr√≠ticos
      const criticalIssues = cacheCheck.issues.filter(issue => 
        issue.includes('corrompido') || 
        issue.includes('erro') ||
        issue.includes('falha')
      );

      if (criticalIssues.length === 0) {
        // Apenas problemas menores - tentar corre√ß√£o autom√°tica
        console.log('üîß [SystemHealth] Tentando corre√ß√£o autom√°tica...');
        const fixResult = await autoFixCacheIssues();
        
        if (fixResult.fixed) {
          autoFixed = true;
          actions = fixResult.actions;
          console.log(`‚úÖ [SystemHealth] ${actions.length} problema(s) corrigido(s) automaticamente`);
        }
      } else {
        // Problemas cr√≠ticos - requer interven√ß√£o manual
        needsManualIntervention = true;
        console.warn('üö® [SystemHealth] Problemas cr√≠ticos detectados - interven√ß√£o manual necess√°ria');
      }
    }

    // 2. Verificar novamente ap√≥s corre√ß√µes
    const finalCheck = detectCacheIssues();
    
    const result: HealthCheckResult = {
      isHealthy: !finalCheck.hasIssues,
      issues: finalCheck.issues,
      autoFixed,
      actions,
      needsManualIntervention
    };

    if (result.isHealthy) {
      console.log('‚úÖ [SystemHealth] Sistema est√° saud√°vel');
    } else {
      console.warn(`‚ö†Ô∏è [SystemHealth] ${result.issues.length} problema(s) ainda presente(s)`);
    }

    return result;
    
  } catch (error) {
    console.error('‚ùå [SystemHealth] Erro na verifica√ß√£o de sa√∫de:', error);
    return {
      isHealthy: false,
      issues: ['Erro na verifica√ß√£o de sa√∫de do sistema'],
      autoFixed: false,
      actions: [],
      needsManualIntervention: true
    };
  }
};

/**
 * Inicializa√ß√£o silenciosa do sistema - executa corre√ß√µes autom√°ticas sem alertas
 */
export const silentSystemInit = async (): Promise<void> => {
  try {
    console.log('üîÑ [SystemHealth] Inicializa√ß√£o silenciosa do sistema...');
    
    // Verificar e corrigir problemas menores automaticamente
    const cacheCheck = detectCacheIssues();
    
    if (cacheCheck.hasIssues) {
      const minorIssues = cacheCheck.issues.filter(issue => 
        !issue.includes('corrompido') && 
        !issue.includes('erro') &&
        !issue.includes('falha') &&
        (issue.includes('cache') || issue.includes('vers√£o') || issue.includes('duplicada'))
      );

      if (minorIssues.length > 0) {
        console.log(`üîß [SystemHealth] Corrigindo ${minorIssues.length} problema(s) menor(es)...`);
        await autoFixCacheIssues();
      }
    }

    // Atualizar timestamp da √∫ltima verifica√ß√£o
    localStorage.setItem('last_health_check', new Date().toISOString());
    
    console.log('‚úÖ [SystemHealth] Inicializa√ß√£o silenciosa conclu√≠da');
    
  } catch (error) {
    console.error('‚ùå [SystemHealth] Erro na inicializa√ß√£o silenciosa:', error);
  }
};

/**
 * Verifica se √© necess√°rio executar verifica√ß√£o de sa√∫de
 */
export const shouldRunHealthCheck = (): boolean => {
  try {
    const lastCheck = localStorage.getItem('last_health_check');
    
    if (!lastCheck) {
      return true; // Nunca executou
    }

    const lastCheckDate = new Date(lastCheck);
    const now = new Date();
    const hoursSinceLastCheck = (now.getTime() - lastCheckDate.getTime()) / (1000 * 60 * 60);

    // Executar a cada 6 horas
    return hoursSinceLastCheck >= 6;
    
  } catch (error) {
    console.error('‚ùå [SystemHealth] Erro ao verificar necessidade de health check:', error);
    return true; // Em caso de erro, executar verifica√ß√£o
  }
};

/**
 * Monitora a sa√∫de do sistema em tempo real
 */
export const startSystemHealthMonitoring = (): (() => void) => {
  console.log('üëÅÔ∏è [SystemHealth] Iniciando monitoramento de sa√∫de do sistema...');
  
  // Verifica√ß√£o inicial
  setTimeout(() => {
    if (shouldRunHealthCheck()) {
      silentSystemInit();
    }
  }, 3000); // Aguardar 3s para o sistema carregar

  // Verifica√ß√£o peri√≥dica (a cada 30 minutos)
  const interval = setInterval(() => {
    if (shouldRunHealthCheck()) {
      silentSystemInit();
    }
  }, 30 * 60 * 1000); // 30 minutos

  // Monitorar eventos de erro do sistema
  const errorHandler = (event: ErrorEvent) => {
    console.error('üö® [SystemHealth] Erro detectado:', event.error);
    
    // Se for erro relacionado a cache/localStorage, executar corre√ß√£o
    if (event.error?.message?.includes('localStorage') || 
        event.error?.message?.includes('cache') ||
        event.error?.message?.includes('storage')) {
      console.log('üîß [SystemHealth] Erro de cache detectado - executando corre√ß√£o...');
      silentSystemInit();
    }
  };

  window.addEventListener('error', errorHandler);

  // Retornar fun√ß√£o de cleanup
  return () => {
    clearInterval(interval);
    window.removeEventListener('error', errorHandler);
    console.log('üõë [SystemHealth] Monitoramento de sa√∫de interrompido');
  };
};

/**
 * For√ßa verifica√ß√£o completa e exibe relat√≥rio detalhado
 */
export const forceHealthCheckWithReport = async (): Promise<void> => {
  console.log('üìã [SystemHealth] === RELAT√ìRIO COMPLETO DE SA√öDE ===');
  
  try {
    // Diagn√≥stico detalhado
    diagnoseCacheState();
    
    // Verifica√ß√£o completa
    const result = await runSystemHealthCheck();
    
    console.log('üìä [SystemHealth] === RESULTADO DA VERIFICA√á√ÉO ===');
    console.log(`Status: ${result.isHealthy ? '‚úÖ SAUD√ÅVEL' : '‚ö†Ô∏è PROBLEMAS DETECTADOS'}`);
    console.log(`Problemas encontrados: ${result.issues.length}`);
    console.log(`Corre√ß√£o autom√°tica: ${result.autoFixed ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log(`A√ß√µes executadas: ${result.actions.length}`);
    console.log(`Interven√ß√£o manual necess√°ria: ${result.needsManualIntervention ? '‚ö†Ô∏è SIM' : '‚úÖ N√ÉO'}`);
    
    if (result.issues.length > 0) {
      console.log('üìù [SystemHealth] Problemas detectados:');
      result.issues.forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue}`);
      });
    }

    if (result.actions.length > 0) {
      console.log('üîß [SystemHealth] A√ß√µes executadas:');
      result.actions.forEach((action, index) => {
        console.log(`  ${index + 1}. ${action}`);
      });
    }
    
    console.log('üìã [SystemHealth] === FIM DO RELAT√ìRIO ===');
    
  } catch (error) {
    console.error('‚ùå [SystemHealth] Erro no relat√≥rio de sa√∫de:', error);
  }
};
