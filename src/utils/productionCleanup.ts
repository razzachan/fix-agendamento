/**
 * Utilit√°rios para limpeza de dados em produ√ß√£o
 */

/**
 * Limpa todos os dados de desenvolvimento/cache do navegador
 */
export function clearDevelopmentData(): void {
  console.log('üßπ [ProductionCleanup] Iniciando limpeza de dados de desenvolvimento...');
  
  try {
    // Lista de chaves para remover
    const keysToRemove = [
      'eletrofix_session',
      'auth_token',
      'user_session'
    ];

    // Remover chaves espec√≠ficas
    keysToRemove.forEach(key => {
      if (localStorage.getItem(key)) {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è [ProductionCleanup] Removido: ${key}`);
      }
    });

    // Remover apenas chaves espec√≠ficas do Supabase (n√£o tokens de auth v√°lidos)
    Object.keys(localStorage).forEach(key => {
      // Preservar tokens de auth v√°lidos do Supabase
      if (key.startsWith('sb-') && key.includes('-auth-token')) {
        console.log(`üîí [ProductionCleanup] Preservando token de auth: ${key}`);
        return;
      }

      // Remover outras chaves de desenvolvimento do Supabase
      if (key.includes('supabase-demo') || key.includes('supabase-dev')) {
        localStorage.removeItem(key);
        console.log(`üóëÔ∏è [ProductionCleanup] Removido Supabase dev: ${key}`);
      }
    });

    // Limpar sessionStorage tamb√©m
    sessionStorage.clear();
    console.log('üóëÔ∏è [ProductionCleanup] SessionStorage limpo');

    console.log('‚úÖ [ProductionCleanup] Limpeza conclu√≠da com sucesso');
    
    return true;
  } catch (error) {
    console.error('‚ùå [ProductionCleanup] Erro na limpeza:', error);
    return false;
  }
}

/**
 * Verifica se estamos em produ√ß√£o
 */
export function isProduction(): boolean {
  return window.location.hostname === 'app.fixfogoes.com.br';
}

/**
 * For√ßa logout e limpeza completa
 */
export async function forceLogoutAndClean(): Promise<void> {
  console.log('üîÑ [ProductionCleanup] For√ßando logout e limpeza...');

  // Evitar execu√ß√£o m√∫ltipla
  if ((window as any).__cleanupInProgress) {
    console.log('‚ö†Ô∏è [ProductionCleanup] Limpeza j√° em andamento, ignorando...');
    return;
  }

  (window as any).__cleanupInProgress = true;

  try {
    // Importar dinamicamente para evitar depend√™ncias circulares
    const { supabase } = await import('@/integrations/supabase/client');

    // Fazer logout do Supabase
    await supabase.auth.signOut();
    console.log('‚úÖ [ProductionCleanup] Logout do Supabase realizado');

    // Limpar dados locais
    clearDevelopmentData();

    console.log('‚úÖ [ProductionCleanup] Limpeza conclu√≠da, redirecionando...');

    // Redirecionar para login em vez de reload
    window.location.href = '/login';
  } catch (error) {
    console.error('‚ùå [ProductionCleanup] Erro no logout for√ßado:', error);
    // Mesmo com erro, limpar dados e redirecionar
    clearDevelopmentData();
    window.location.href = '/login';
  } finally {
    (window as any).__cleanupInProgress = false;
  }
}

/**
 * Inicializa√ß√£o autom√°tica em produ√ß√£o
 */
export function initProductionCleanup(): void {
  if (isProduction()) {
    console.log('üè≠ [ProductionCleanup] Ambiente de produ√ß√£o detectado');
    
    // Verificar se h√° dados de desenvolvimento (excluindo tokens v√°lidos)
    const hasDevData = localStorage.getItem('eletrofix_session') ||
                      localStorage.getItem('demo_session') ||
                      localStorage.getItem('admin_session') ||
                      Object.keys(localStorage).some(key =>
                        (key.includes('supabase-demo') || key.includes('supabase-dev')) &&
                        !key.includes('-auth-token')
                      );
    
    if (hasDevData) {
      console.log('‚ö†Ô∏è [ProductionCleanup] Dados de desenvolvimento detectados, limpando...');
      clearDevelopmentData();
    }
  }
}
