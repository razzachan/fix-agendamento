import React from 'react';
import { createPortal } from 'react-dom';
import { useStatusDialog } from '@/contexts/StatusDialogContext';
import { StatusAdvanceDialog } from '@/components/technician/StatusAdvanceDialog';
import { useAppData } from '@/hooks/useAppData';
import { useAuth } from '@/contexts/auth/AuthContext';
import { toast } from 'sonner';

export const GlobalStatusAdvanceDialog: React.FC = () => {
  const { showStatusAdvanceDialog, setShowStatusAdvanceDialog, serviceOrderId } = useStatusDialog();
  const { serviceOrders, updateServiceOrder } = useAppData();
  const { user } = useAuth();

  console.log('üéØ [GlobalStatusAdvanceDialog] Renderizando:', { showStatusAdvanceDialog, serviceOrderId });

  if (!showStatusAdvanceDialog || !serviceOrderId) {
    return null;
  }

  // Encontrar a ordem de servi√ßo
  const serviceOrder = serviceOrders.find(order => order.id === serviceOrderId);
  if (!serviceOrder) {
    console.error('üéØ [GlobalStatusAdvanceDialog] Ordem de servi√ßo n√£o encontrada:', serviceOrderId);
    return null;
  }

  // Calcular pr√≥ximo status (l√≥gica simplificada para coleta diagn√≥stico)
  const nextStatus = 'collected_for_diagnosis';
  const nextStatusLabel = 'Coletado para Diagn√≥stico';

  const handleStatusUpdate = async (orderId: string, status: string, notes?: string): Promise<boolean> => {
    console.log('üéØ [GlobalStatusAdvanceDialog] === IN√çCIO DA ATUALIZA√á√ÉO ===');
    console.log('üéØ [GlobalStatusAdvanceDialog] Par√¢metros recebidos:', { orderId, status, notes });
    console.log('üéØ [GlobalStatusAdvanceDialog] updateServiceOrder dispon√≠vel:', !!updateServiceOrder);
    console.log('üéØ [GlobalStatusAdvanceDialog] Tipo de updateServiceOrder:', typeof updateServiceOrder);

    try {
      // Verificar se a fun√ß√£o existe antes de chamar
      if (!updateServiceOrder) {
        console.error('‚ùå [GlobalStatusAdvanceDialog] updateServiceOrder n√£o est√° dispon√≠vel!');
        toast.error('Fun√ß√£o de atualiza√ß√£o n√£o dispon√≠vel');
        return false;
      }

      // Preparar dados de atualiza√ß√£o - VERS√ÉO SIMPLIFICADA PARA TESTE
      const updateData: any = { status: status as any };
      if (notes) {
        updateData.notes = notes;
      }

      console.log('üéØ [GlobalStatusAdvanceDialog] Dados preparados para atualiza√ß√£o:', updateData);
      console.log('üéØ [GlobalStatusAdvanceDialog] Executando updateServiceOrder...');

      // Atualizar no banco de dados
      const success = await updateServiceOrder(orderId, updateData);

      console.log('üéØ [GlobalStatusAdvanceDialog] Resultado do updateServiceOrder:', success);
      console.log('üéØ [GlobalStatusAdvanceDialog] Tipo do resultado:', typeof success);

      if (success) {
        console.log('‚úÖ [GlobalStatusAdvanceDialog] Status atualizado com sucesso no banco');
        toast.success(`Status atualizado para: ${nextStatusLabel}`);

        // Fechar o dialog primeiro
        setShowStatusAdvanceDialog(false);

        // For√ßar refresh da p√°gina para garantir que os dados sejam atualizados
        console.log('üîÑ [GlobalStatusAdvanceDialog] For√ßando refresh da p√°gina...');
        setTimeout(() => {
          window.location.reload();
        }, 500);

        return true;
      } else {
        console.error('‚ùå [GlobalStatusAdvanceDialog] updateServiceOrder retornou false');
        toast.error('Erro ao atualizar status da ordem de servi√ßo');
        return false;
      }
    } catch (error) {
      console.error('‚ùå [GlobalStatusAdvanceDialog] Erro capturado:', error);
      console.error('‚ùå [GlobalStatusAdvanceDialog] Stack trace:', error?.stack);
      console.error('‚ùå [GlobalStatusAdvanceDialog] Mensagem do erro:', error?.message);
      toast.error('Erro ao atualizar status da ordem de servi√ßo');
      return false;
    }
  };

  // Fun√ß√£o para atualiza√ß√£o direta (bypass do fluxo de pagamento)
  const handleDirectStatusUpdate = async () => {
    console.log('üéØ [GlobalStatusAdvanceDialog] === ATUALIZA√á√ÉO DIRETA ===');
    const success = await handleStatusUpdate(serviceOrder.id, nextStatus);
    if (success) {
      console.log('‚úÖ [GlobalStatusAdvanceDialog] Atualiza√ß√£o direta bem-sucedida');
    }
  };

  return (
    <StatusAdvanceDialog
      open={showStatusAdvanceDialog}
      onOpenChange={setShowStatusAdvanceDialog}
      serviceOrder={{
        id: serviceOrder.id,
        order_number: serviceOrder.orderNumber,
        client_name: serviceOrder.clientName,
        equipment_type: serviceOrder.equipmentType,
        equipment_model: serviceOrder.equipmentModel,
        equipment_serial: serviceOrder.equipmentSerial,
        service_attendance_type: serviceOrder.serviceAttendanceType as any,
        status: serviceOrder.status,
        final_cost: serviceOrder.finalCost,
        pickup_address: serviceOrder.pickupAddress
      }}
      nextStatus={nextStatus}
      nextStatusLabel={nextStatusLabel}
      technicianId={user?.id || 'unknown'}
      technicianName={user?.name || 'T√©cnico'}
      onStatusUpdate={handleStatusUpdate}
    />
  );
};
