import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { UserRole } from '@/types';

interface ProtectedRouteProps {
  children: React.ReactNode;
  allowedRoles: UserRole[];
  redirectTo?: string;
}

/**
 * Componente para proteger rotas baseado nas roles do usu치rio
 * 
 * Verifica se o usu치rio est치 autenticado e tem uma das roles permitidas.
 * Caso contr치rio, redireciona para a p치gina especificada.
 * 
 * @param children Conte칰do a ser renderizado se o usu치rio tiver permiss칚o
 * @param allowedRoles Array de roles que t칡m permiss칚o para acessar a rota
 * @param redirectTo P치gina para redirecionar se o usu치rio n칚o tiver permiss칚o (padr칚o: /dashboard)
 */
const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  allowedRoles,
  redirectTo = '/dashboard'
}) => {
  console.log('游댏 [ProtectedRoute] Executando ProtectedRoute');
  const { user, isAuthenticated, isLoading } = useAuth();
  const location = useLocation();
  console.log('游댏 [ProtectedRoute] Auth state:', { user, isAuthenticated, isLoading, location: location.pathname });

  // Se ainda estiver carregando, mostra um indicador de carregamento
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  // Se n칚o estiver autenticado, redireciona para o login
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Se o usu치rio n칚o tiver a role necess치ria, redireciona para a p치gina apropriada
  if (user && !allowedRoles.includes(user.role as UserRole)) {
    // Redirecionar clientes para o portal do cliente
    if (user.role === 'client') {
      return <Navigate to="/client/portal" state={{ from: location }} replace />;
    }
    // Outros usu치rios para o dashboard padr칚o
    return <Navigate to={redirectTo} state={{ from: location }} replace />;
  }

  // Se tudo estiver ok, renderiza o conte칰do
  return <>{children}</>;
};

export default ProtectedRoute;
