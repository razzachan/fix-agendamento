import { supabase } from '@/integrations/supabase/client';

/**
 * Servi√ßo para corrigir os valores das ordens de servi√ßo
 * Calcula final_cost baseado em initial_cost + estimated_cost do diagn√≥stico
 */
export class CorrectServiceOrderValuesService {
  
  /**
   * Corrige os valores de todas as ordens de servi√ßo
   */
  static async correctAllOrderValues(): Promise<void> {
    try {
      console.log('üéØ [CorrectValues] Iniciando corre√ß√£o de valores das ordens...');
      
      // 1. Buscar todas as ordens com seus diagn√≥sticos
      const { data: orders, error } = await supabase
        .from('service_orders')
        .select(`
          id,
          initial_cost,
          final_cost,
          service_attendance_type,
          equipment_diagnostics (
            estimated_cost
          )
        `);

      if (error) {
        console.error('‚ùå Erro ao buscar ordens:', error);
        return;
      }

      if (!orders || orders.length === 0) {
        console.log('‚ÑπÔ∏è Nenhuma ordem encontrada');
        return;
      }

      console.log(`üìã Encontradas ${orders.length} ordens para processar`);

      // 2. Processar cada ordem
      let correctedCount = 0;
      
      for (const order of orders) {
        const correctedValue = this.calculateCorrectFinalCost(order);
        
        // S√≥ atualizar se o valor estiver diferente
        if (correctedValue !== order.final_cost) {
          const { error: updateError } = await supabase
            .from('service_orders')
            .update({ final_cost: correctedValue })
            .eq('id', order.id);

          if (updateError) {
            console.error(`‚ùå Erro ao atualizar ordem ${order.id}:`, updateError);
          } else {
            console.log(`‚úÖ Ordem ${order.id}: R$ ${order.final_cost} ‚Üí R$ ${correctedValue}`);
            correctedCount++;
          }
        }
      }

      console.log(`‚úÖ Corre√ß√£o conclu√≠da: ${correctedCount} ordens atualizadas`);
      
    } catch (error) {
      console.error('‚ùå Erro na corre√ß√£o de valores:', error);
    }
  }

  /**
   * Calcula o valor final correto baseado na l√≥gica:
   * final_cost = initial_cost + estimated_cost (do diagn√≥stico)
   */
  private static calculateCorrectFinalCost(order: any): number {
    const initialCost = order.initial_cost || 0;
    const estimatedCost = order.equipment_diagnostics?.[0]?.estimated_cost || 0;
    
    // Se n√£o h√° diagn√≥stico, final_cost = initial_cost
    if (estimatedCost === 0) {
      return initialCost;
    }
    
    // Se h√° diagn√≥stico, final_cost = initial_cost + estimated_cost
    return initialCost + estimatedCost;
  }

  /**
   * Corrige uma ordem espec√≠fica
   */
  static async correctSingleOrder(orderId: string): Promise<boolean> {
    try {
      console.log(`üéØ [CorrectValues] Corrigindo ordem ${orderId}...`);
      
      // Buscar a ordem com diagn√≥stico
      const { data: order, error } = await supabase
        .from('service_orders')
        .select(`
          id,
          initial_cost,
          final_cost,
          equipment_diagnostics (
            estimated_cost
          )
        `)
        .eq('id', orderId)
        .single();

      if (error) {
        console.error('‚ùå Erro ao buscar ordem:', error);
        return false;
      }

      if (!order) {
        console.log('‚ÑπÔ∏è Ordem n√£o encontrada');
        return false;
      }

      // Calcular valor correto
      const correctedValue = this.calculateCorrectFinalCost(order);
      
      // Atualizar se necess√°rio
      if (correctedValue !== order.final_cost) {
        const { error: updateError } = await supabase
          .from('service_orders')
          .update({ final_cost: correctedValue })
          .eq('id', orderId);

        if (updateError) {
          console.error('‚ùå Erro ao atualizar ordem:', updateError);
          return false;
        }

        console.log(`‚úÖ Ordem ${orderId}: R$ ${order.final_cost} ‚Üí R$ ${correctedValue}`);
        return true;
      }

      console.log(`‚ÑπÔ∏è Ordem ${orderId} j√° est√° com valor correto: R$ ${order.final_cost}`);
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro na corre√ß√£o da ordem:', error);
      return false;
    }
  }

  /**
   * Gera relat√≥rio dos valores atuais vs corretos
   */
  static async generateValuesReport(): Promise<void> {
    try {
      console.log('üìä [CorrectValues] Gerando relat√≥rio de valores...');
      
      const { data: orders, error } = await supabase
        .from('service_orders')
        .select(`
          id,
          order_number,
          client_name,
          initial_cost,
          final_cost,
          service_attendance_type,
          equipment_diagnostics (
            estimated_cost
          )
        `)
        .order('created_at', { ascending: false })
        .limit(50);

      if (error) {
        console.error('‚ùå Erro ao buscar ordens:', error);
        return;
      }

      if (!orders || orders.length === 0) {
        console.log('‚ÑπÔ∏è Nenhuma ordem encontrada');
        return;
      }

      console.log('\nüìã RELAT√ìRIO DE VALORES:');
      console.log('='.repeat(80));
      
      let needsCorrection = 0;
      
      for (const order of orders) {
        const correctValue = this.calculateCorrectFinalCost(order);
        const needsUpdate = correctValue !== order.final_cost;
        
        if (needsUpdate) needsCorrection++;
        
        console.log(`
üîç Ordem: ${order.order_number || order.id.substring(0, 8)}
üë§ Cliente: ${order.client_name}
üí∞ Atual: R$ ${order.final_cost || 0}
‚úÖ Correto: R$ ${correctValue}
${needsUpdate ? '‚ö†Ô∏è  PRECISA CORRE√á√ÉO' : '‚úÖ OK'}
${'‚îÄ'.repeat(40)}`);
      }
      
      console.log(`\nüìä RESUMO: ${needsCorrection} ordens precisam de corre√ß√£o`);
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar relat√≥rio:', error);
    }
  }
}
