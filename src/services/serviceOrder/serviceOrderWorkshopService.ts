import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

/**
 * Service para gerenciar a associa√ß√£o entre ordens de servi√ßo e oficinas
 * Como n√£o temos campo workshop_id na tabela service_orders, vamos usar uma abordagem alternativa
 */
export const serviceOrderWorkshopService = {
  /**
   * Associa uma ordem de servi√ßo a uma oficina
   * Estrat√©gia: Salvar no campo notes ou criar evento de hist√≥rico
   */
  async assignWorkshop(serviceOrderId: string, workshopId: string, workshopName: string): Promise<boolean> {
    try {
      console.log('üéØ [serviceOrderWorkshopService] Associando ordem √† oficina:', {
        serviceOrderId,
        workshopId,
        workshopName
      });

      // Estrat√©gia 1: Salvar como evento no hist√≥rico da ordem
      const eventDescription = `Equipamento enviado para oficina: ${workshopName} (ID: ${workshopId})`;

      const { error: eventError } = await supabase
        .rpc('insert_service_event', {
          p_service_order_id: serviceOrderId,
          p_type: 'note',
          p_created_by: 'Sistema',
          p_description: eventDescription
        });

      if (eventError) {
        console.error('‚ùå Erro ao criar evento de oficina:', eventError);
        throw eventError;
      }

      // Estrat√©gia 2: Atualizar campo notes com informa√ß√£o da oficina
      // Primeiro, buscar notes existentes
      const { data: currentOrder, error: fetchError } = await supabase
        .from('service_orders')
        .select('notes')
        .eq('id', serviceOrderId)
        .single();

      if (fetchError) {
        console.error('‚ùå Erro ao buscar ordem atual:', fetchError);
        // N√£o falha aqui, pois o evento j√° foi criado
      } else {
        // Adicionar informa√ß√£o da oficina √†s notes
        const workshopInfo = `[OFICINA] ${workshopName} (${workshopId})`;
        const currentNotes = currentOrder?.notes || '';
        const updatedNotes = currentNotes 
          ? `${currentNotes}\n${workshopInfo}`
          : workshopInfo;

        const { error: updateError } = await supabase
          .from('service_orders')
          .update({ notes: updatedNotes })
          .eq('id', serviceOrderId);

        if (updateError) {
          console.error('‚ùå Erro ao atualizar notes:', updateError);
          // N√£o falha aqui, pois o evento j√° foi criado
        }
      }

      console.log('‚úÖ [serviceOrderWorkshopService] Oficina associada com sucesso');
      return true;

    } catch (error) {
      console.error('‚ùå Erro ao associar oficina:', error);
      toast.error('Erro ao associar oficina √† ordem de servi√ßo.');
      return false;
    }
  },

  /**
   * Busca a oficina associada a uma ordem de servi√ßo
   */
  async getAssignedWorkshop(serviceOrderId: string): Promise<{ workshopId: string; workshopName: string } | null> {
    try {
      console.log('üéØ [serviceOrderWorkshopService] Buscando oficina da ordem:', serviceOrderId);

      // Buscar no campo notes
      const { data: order, error: fetchError } = await supabase
        .from('service_orders')
        .select('notes')
        .eq('id', serviceOrderId)
        .single();

      if (fetchError || !order?.notes) {
        console.log('üìù Nenhuma oficina encontrada nas notes');
        return null;
      }

      // Extrair informa√ß√£o da oficina das notes
      const workshopMatch = order.notes.match(/\[OFICINA\]\s+(.+?)\s+\(([^)]+)\)/);
      
      if (workshopMatch) {
        const workshopName = workshopMatch[1];
        const workshopId = workshopMatch[2];
        
        console.log('‚úÖ Oficina encontrada:', { workshopId, workshopName });
        return { workshopId, workshopName };
      }

      console.log('üìù Formato de oficina n√£o encontrado nas notes');
      return null;

    } catch (error) {
      console.error('‚ùå Erro ao buscar oficina associada:', error);
      return null;
    }
  },

  /**
   * Remove a associa√ß√£o de oficina de uma ordem de servi√ßo
   */
  async removeWorkshopAssignment(serviceOrderId: string): Promise<boolean> {
    try {
      console.log('üéØ [serviceOrderWorkshopService] Removendo associa√ß√£o de oficina:', serviceOrderId);

      // Buscar notes atuais
      const { data: order, error: fetchError } = await supabase
        .from('service_orders')
        .select('notes')
        .eq('id', serviceOrderId)
        .single();

      if (fetchError || !order?.notes) {
        console.log('üìù Nenhuma note encontrada para remover');
        return true;
      }

      // Remover linha da oficina das notes
      const updatedNotes = order.notes
        .split('\n')
        .filter(line => !line.includes('[OFICINA]'))
        .join('\n')
        .trim();

      const { error: updateError } = await supabase
        .from('service_orders')
        .update({ notes: updatedNotes || null })
        .eq('id', serviceOrderId);

      if (updateError) {
        console.error('‚ùå Erro ao remover oficina das notes:', updateError);
        throw updateError;
      }

      // Criar evento de remo√ß√£o
      const { error: eventError } = await supabase
        .rpc('insert_service_event', {
          p_service_order_id: serviceOrderId,
          p_type: 'note',
          p_created_by: 'Sistema',
          p_description: 'Associa√ß√£o com oficina removida'
        });

      if (eventError) {
        console.error('‚ùå Erro ao criar evento de remo√ß√£o:', eventError);
        // N√£o falha aqui, pois a remo√ß√£o das notes j√° foi feita
      }

      console.log('‚úÖ [serviceOrderWorkshopService] Associa√ß√£o removida com sucesso');
      return true;

    } catch (error) {
      console.error('‚ùå Erro ao remover associa√ß√£o de oficina:', error);
      toast.error('Erro ao remover associa√ß√£o de oficina.');
      return false;
    }
  }
};
