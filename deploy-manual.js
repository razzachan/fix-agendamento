#!/usr/bin/env node

/**
 * =====================================================
 * SCRIPT DE DEPLOY MANUAL PARA HOSTGATOR
 * =====================================================
 * Execute: npm run deploy:manual
 * Faz build local e envia via FTP para app.fixfogoes.com.br
 * =====================================================
 */

const ftp = require('basic-ftp');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
require('dotenv').config();

// Configura√ß√µes
const FTP_CONFIG = {
    host: process.env.FTP_SERVER || 'ftp.fixfogoes.com.br',
    user: process.env.FTP_USERNAME || 'miragioc@fixfogoes.com.br',
    password: process.env.FTP_PASSWORD,
    secure: false,
    port: 21
};

const CPANEL_USER = process.env.CPANEL_USER || 'miragioc';
const DEPLOY_DOMAIN = process.env.DEPLOY_DOMAIN || 'app.fixfogoes.com.br';
const REMOTE_DIR = `/public_html/${DEPLOY_DOMAIN}/`;
const LOCAL_DIR = './dist/';

// Fun√ß√£o para log colorido
const log = {
    info: (msg) => console.log(`\x1b[36m[INFO]\x1b[0m ${msg}`),
    success: (msg) => console.log(`\x1b[32m[SUCCESS]\x1b[0m ${msg}`),
    error: (msg) => console.log(`\x1b[31m[ERROR]\x1b[0m ${msg}`),
    warn: (msg) => console.log(`\x1b[33m[WARN]\x1b[0m ${msg}`)
};

// Fun√ß√£o para fazer build
async function buildProject() {
    log.info('üèóÔ∏è  Fazendo build do projeto...');
    
    try {
        execSync('npm run build', { stdio: 'inherit' });
        log.success('‚úÖ Build conclu√≠do com sucesso!');
        return true;
    } catch (error) {
        log.error('‚ùå Erro no build:', error.message);
        return false;
    }
}

// Fun√ß√£o para verificar se a pasta dist existe
function checkDistFolder() {
    if (!fs.existsSync(LOCAL_DIR)) {
        log.error('‚ùå Pasta dist/ n√£o encontrada. Execute o build primeiro.');
        return false;
    }
    
    const files = fs.readdirSync(LOCAL_DIR);
    if (files.length === 0) {
        log.error('‚ùå Pasta dist/ est√° vazia.');
        return false;
    }
    
    log.success(`‚úÖ Pasta dist/ encontrada com ${files.length} arquivos.`);
    return true;
}

// Fun√ß√£o para upload via FTP
async function uploadToFTP() {
    const client = new ftp.Client();
    client.ftp.verbose = true;
    
    try {
        log.info('üîå Conectando ao servidor FTP...');
        await client.access(FTP_CONFIG);
        log.success('‚úÖ Conectado ao FTP com sucesso!');
        
        // Navegar para o diret√≥rio remoto
        log.info(`üìÅ Navegando para ${REMOTE_DIR}...`);
        await client.ensureDir(REMOTE_DIR);
        
        // Fazer backup do index.html atual (se existir)
        try {
            await client.rename('index.html', `index.html.backup.${Date.now()}`);
            log.info('üíæ Backup do index.html atual criado.');
        } catch (e) {
            log.warn('‚ö†Ô∏è  Nenhum index.html encontrado para backup.');
        }
        
        // Upload da pasta dist
        log.info('üì§ Enviando arquivos...');
        await client.uploadFromDir(LOCAL_DIR, REMOTE_DIR);
        log.success('‚úÖ Upload conclu√≠do com sucesso!');
        
        // Listar arquivos enviados
        const list = await client.list();
        log.info(`üìã Arquivos no servidor: ${list.length} itens`);
        
        client.close();
        
    } catch (error) {
        log.error('‚ùå Erro no upload FTP:', error.message);
        client.close();
        throw error;
    }
}

// Fun√ß√£o principal
async function deploy() {
    console.log('\nüöÄ INICIANDO DEPLOY MANUAL PARA HOSTGATOR\n');
    
    try {
        // Verificar credenciais FTP
        if (!FTP_CONFIG.password) {
            log.error('‚ùå Senha FTP n√£o configurada. Defina FTP_PASSWORD no .env');
            process.exit(1);
        }
        
        // 1. Fazer build
        const buildSuccess = await buildProject();
        if (!buildSuccess) {
            process.exit(1);
        }
        
        // 2. Verificar pasta dist
        if (!checkDistFolder()) {
            process.exit(1);
        }
        
        // 3. Upload via FTP
        await uploadToFTP();
        
        console.log('\nüéâ DEPLOY CONCLU√çDO COM SUCESSO!');
        console.log('üåê Site dispon√≠vel em: https://app.fixfogoes.com.br');
        console.log('‚è∞ Deploy realizado em:', new Date().toLocaleString('pt-BR'));
        
    } catch (error) {
        log.error('üí• Deploy falhou:', error.message);
        process.exit(1);
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    deploy();
}

module.exports = { deploy };
