#!/usr/bin/env python3
"""
Script para atualizar tabela de tracking para suportar m√∫ltiplos sites
Adiciona colunas: site_domain, site_name, business_name, business_type
"""

import requests
import json

def update_tracking_table():
    """
    Adiciona colunas para m√∫ltiplos sites na tabela existente
    """
    try:
        # Credenciais
        url = "https://hdyucwabemspehokoiks.supabase.co"
        service_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhkeXVjd2FiZW1zcGVob2tvaWtzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NDA0MDc2OSwiZXhwIjoyMDU5NjE2NzY5fQ.G_2PF8hXeXIfl59xmywqpGdWiJC6JEVHFwJkoyBSWc0"
        
        headers = {
            "apikey": service_key,
            "Authorization": f"Bearer {service_key}",
            "Content-Type": "application/json"
        }
        
        print("üöÄ Atualizando tabela para suportar m√∫ltiplos sites...")
        
        # Primeiro, testar se a tabela existe
        test_url = f"{url}/rest/v1/google_ads_tracking_sessions?select=count"
        response = requests.get(test_url, headers=headers)
        
        if response.status_code != 200:
            print("‚ùå Tabela n√£o existe. Execute create_table_direct.py primeiro.")
            return False
        
        print("‚úÖ Tabela existe. Verificando se precisa de atualiza√ß√£o...")
        
        # Tentar inserir um registro com as novas colunas para testar
        test_data = {
            "gclid": "multisite_test_123",
            "utm_source": "test",
            "utm_campaign": "multisite_test",
            "user_agent": "Update Script",
            "session_active": True,
            # Novas colunas
            "site_domain": "test.fixeletros.com.br",
            "site_name": "Fix Eletros Test",
            "business_name": "Fix Eletros",
            "business_type": "assistencia_tecnica_test"
        }
        
        insert_url = f"{url}/rest/v1/google_ads_tracking_sessions"
        response = requests.post(insert_url, headers=headers, json=test_data)
        
        if response.status_code in [200, 201]:
            print("‚úÖ Tabela j√° suporta m√∫ltiplos sites!")
            
            # Remover registro de teste
            delete_url = f"{url}/rest/v1/google_ads_tracking_sessions?gclid=eq.multisite_test_123"
            requests.delete(delete_url, headers=headers)
            print("‚úÖ Registro de teste removido")
            
            return True
        else:
            print(f"‚ö†Ô∏è Tabela precisa ser atualizada: {response.status_code}")
            print("üìã Resposta:", response.text[:200])
            
            # Se falhou, significa que as colunas n√£o existem
            print("\nüí° SOLU√á√ÉO MANUAL:")
            print("1. Acesse: https://hdyucwabemspehokoiks.supabase.co/project/hdyucwabemspehokoiks/editor")
            print("2. V√° em SQL Editor")
            print("3. Execute este SQL:")
            print("""
-- Adicionar colunas para m√∫ltiplos sites
ALTER TABLE google_ads_tracking_sessions 
ADD COLUMN IF NOT EXISTS site_domain TEXT,
ADD COLUMN IF NOT EXISTS site_name TEXT,
ADD COLUMN IF NOT EXISTS business_name TEXT,
ADD COLUMN IF NOT EXISTS business_type TEXT;

-- Criar √≠ndices
CREATE INDEX IF NOT EXISTS idx_tracking_sessions_site_domain 
ON google_ads_tracking_sessions(site_domain) WHERE site_domain IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_tracking_sessions_business_type 
ON google_ads_tracking_sessions(business_type) WHERE business_type IS NOT NULL;

-- Coment√°rios
COMMENT ON COLUMN google_ads_tracking_sessions.site_domain IS 'Dom√≠nio do site (www.fixfogoes.com.br ou fixeletros.com.br)';
COMMENT ON COLUMN google_ads_tracking_sessions.site_name IS 'Nome do site (Fix Fog√µes ou Fix Eletros)';
COMMENT ON COLUMN google_ads_tracking_sessions.business_name IS 'Nome do neg√≥cio';
COMMENT ON COLUMN google_ads_tracking_sessions.business_type IS 'Tipo de assist√™ncia t√©cnica';
            """)
            
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def test_multisite_functionality():
    """
    Testa a funcionalidade de m√∫ltiplos sites
    """
    try:
        print("\nüß™ Testando funcionalidade de m√∫ltiplos sites...")
        
        # URLs dos middlewares
        middleware_url = "https://fix-agendamento-production.up.railway.app"
        
        # Teste 1: Fix Fog√µes
        print("1. Testando Fix Fog√µes...")
        fogoes_data = {
            "gclid": f"test_fogoes_{int(__import__('time').time())}",
            "utm_source": "google",
            "utm_campaign": "fogao_conserto",
            "site_domain": "www.fixfogoes.com.br",
            "site_name": "Fix Fog√µes",
            "business_name": "Fix Fog√µes",
            "business_type": "assistencia_tecnica_fogoes"
        }
        
        response = requests.post(
            f"{middleware_url}/sync-tracking",
            json=fogoes_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Fix Fog√µes: Tracking sincronizado")
        else:
            print(f"‚ùå Fix Fog√µes: Erro {response.status_code}")
        
        # Teste 2: Fix Eletros
        print("2. Testando Fix Eletros...")
        eletros_data = {
            "gclid": f"test_eletros_{int(__import__('time').time())}",
            "utm_source": "google",
            "utm_campaign": "eletrodomesticos_conserto",
            "site_domain": "fixeletros.com.br",
            "site_name": "Fix Eletros",
            "business_name": "Fix Eletros",
            "business_type": "assistencia_tecnica_eletros"
        }
        
        response = requests.post(
            f"{middleware_url}/sync-tracking",
            json=eletros_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Fix Eletros: Tracking sincronizado")
        else:
            print(f"‚ùå Fix Eletros: Erro {response.status_code}")
        
        # Teste 3: Verificar tracking
        print("3. Verificando tracking ativo...")
        response = requests.get(f"{middleware_url}/check-tracking", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Tracking ativo: {data.get('has_tracking', False)}")
        else:
            print(f"‚ùå Erro ao verificar: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False

def main():
    """
    Executa a atualiza√ß√£o e testes
    """
    print("üéØ ATUALIZA√á√ÉO PARA M√öLTIPLOS SITES")
    print("=" * 50)
    
    # Atualizar tabela
    table_updated = update_tracking_table()
    
    if table_updated:
        print("\nüß™ Executando testes...")
        test_multisite_functionality()
        
        print("\n" + "=" * 50)
        print("üéâ SISTEMA ATUALIZADO PARA M√öLTIPLOS SITES!")
        print("\nüìã SITES SUPORTADOS:")
        print("‚úÖ www.fixfogoes.com.br - Fix Fog√µes")
        print("‚úÖ fixeletros.com.br - Fix Eletros")
        print("‚úÖ app.fixfogoes.com.br - Fix Fog√µes App")
        
        print("\nüéØ PR√ìXIMOS PASSOS:")
        print("1. Fazer deploy das mudan√ßas")
        print("2. Configurar campanhas separadas no Google Ads")
        print("3. Criar a√ß√µes de convers√£o espec√≠ficas por site")
        print("4. Monitorar convers√µes por dom√≠nio")
    else:
        print("\n‚ùå ATUALIZA√á√ÉO NECESS√ÅRIA")
        print("Execute o SQL manual mostrado acima")

if __name__ == "__main__":
    main()
