# -*- coding: utf-8 -*-
import os
import json
import logging
import math
import asyncio
import httpx
from typing import Dict, Any, List, Optional, Tuple
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from supabase import create_client, Client
from dotenv import load_dotenv
import pytz
from datetime import datetime, timedelta

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("üöÄ MIDDLEWARE V4.1 INICIADO - SISTEMA INTELIGENTE COMPLETO COM DEBUG üöÄ")

# Carregar vari√°veis de ambiente
load_dotenv()

app = FastAPI()

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modelo para agendamento
class Agendamento(BaseModel):
    nome: str
    endereco: str
    equipamento: str
    problema: str
    urgente: str = "n√£o"
    telefone: str = None
    cpf: str = None
    email: str = None

def get_supabase_client() -> Client:
    """Criar cliente Supabase"""
    url = os.getenv("SUPABASE_URL")
    key = os.getenv("SUPABASE_KEY")
    if not url or not key:
        raise Exception("Vari√°veis SUPABASE_URL e SUPABASE_KEY s√£o obrigat√≥rias")
    return create_client(url, key)

def determinar_tecnico(equipamento: str) -> str:
    """Determina o t√©cnico baseado no tipo de equipamento"""
    equipamento_lower = equipamento.lower()

    if "coifa" in equipamento_lower:
        return "Marcelo (marcelodsmoritz@gmail.com)"
    else:
        return "Paulo Cesar (betonipaulo@gmail.com)"

def determinar_grupo_logistico(endereco: str) -> str:
    """
    Determina o grupo log√≠stico baseado no endere√ßo
    """
    endereco_lower = endereco.lower()

    # Grupo A - Centro de Florian√≥polis
    if any(bairro in endereco_lower for bairro in ['centro', 'agron√¥mica', 'trindade', 'c√≥rrego grande']):
        return "A"

    # Grupo B - Grande Florian√≥polis
    elif any(cidade in endereco_lower for cidade in ['s√£o jos√©', 'palho√ßa', 'bigua√ßu', 'santo amaro']):
        return "B"

    # Grupo C - Litoral e interior
    else:
        return "C"

async def gerar_horarios_disponiveis_v4(tecnico: str, grupo_logistico: str, urgente: bool) -> List[Dict]:
    """
    Gera hor√°rios dispon√≠veis baseado no t√©cnico e grupo log√≠stico
    """
    try:
        horarios = []
        agora = datetime.now(pytz.timezone('America/Sao_Paulo'))

        # Para urgente, come√ßar amanh√£. Para normal, come√ßar em 2 dias
        inicio = agora + timedelta(days=1 if urgente else 2)

        # Gerar hor√°rios para os pr√≥ximos 7 dias
        for i in range(7):
            data = inicio + timedelta(days=i)

            # Apenas dias √∫teis (segunda a sexta)
            if data.weekday() < 5:
                # Hor√°rios dispon√≠veis: 8h √†s 17h
                for hora in range(8, 18):
                    horario_dt = data.replace(hour=hora, minute=0, second=0, microsecond=0)

                    # Verificar se hor√°rio n√£o est√° ocupado
                    if await verificar_horario_disponivel(horario_dt, tecnico):
                        horarios.append({
                            "datetime_agendamento": horario_dt.isoformat(),
                            "dia_semana": horario_dt.strftime("%A, %d/%m/%Y"),
                            "hora_agendamento": horario_dt.strftime("%H:%M"),
                            "texto": f"{horario_dt.strftime('%A, %d/%m/%Y')} √†s {horario_dt.strftime('%H:%M')}"
                        })

                        # Limitar a 10 hor√°rios
                        if len(horarios) >= 10:
                            break

            if len(horarios) >= 10:
                break

        return horarios

    except Exception as e:
        logger.error(f"Erro ao gerar hor√°rios dispon√≠veis: {e}")
        return []

async def verificar_horario_disponivel(horario_dt: datetime, tecnico: str) -> bool:
    """
    Verifica se um hor√°rio espec√≠fico est√° dispon√≠vel
    """
    try:
        supabase = get_supabase_client()

        # Verificar agendamentos existentes
        response = supabase.table("agendamentos_ai").select("*").eq(
            "data_agendada", horario_dt.isoformat()
        ).eq("tecnico", tecnico).execute()

        if response.data and len(response.data) > 0:
            return False

        # Verificar ordens de servi√ßo agendadas
        response_os = supabase.table("service_orders").select("*").eq(
            "scheduled_date", horario_dt.strftime('%Y-%m-%d')
        ).eq("scheduled_time", horario_dt.strftime('%H:%M')).execute()

        if response_os.data and len(response_os.data) > 0:
            return False

        return True

    except Exception as e:
        logger.error(f"Erro ao verificar disponibilidade: {e}")
        return True  # Em caso de erro, assumir dispon√≠vel

def processar_escolha_horario(horario_escolhido: str, horarios_disponiveis: List[Dict]) -> Optional[str]:
    """
    Processa a escolha do cliente (n√∫mero 1, 2, 3 ou hor√°rio ISO)
    Retorna o hor√°rio ISO correspondente
    """
    try:
        # Verificar se √© um n√∫mero (1, 2, 3)
        if horario_escolhido.strip().isdigit():
            opcao = int(horario_escolhido.strip())
            if 1 <= opcao <= len(horarios_disponiveis):
                horario_selecionado = horarios_disponiveis[opcao - 1]
                return horario_selecionado.get('datetime_agendamento')
            else:
                return None

        # Verificar se √© um hor√°rio ISO (fallback)
        else:
            try:
                datetime.fromisoformat(horario_escolhido)
                return horario_escolhido
            except:
                return None

    except Exception as e:
        logger.error(f"Erro ao processar escolha de hor√°rio: {e}")
        return None

@app.get("/")
async def root():
    """Endpoint principal que serve a interface web"""
    return {"message": "üöÄ MIDDLEWARE V4.0 - SISTEMA INTELIGENTE COMPLETO ATIVO üöÄ", "version": "4.0", "status": "DEPLOY_OK"}

@app.post("/")
async def receber_dados(agendamento: Agendamento):
    """
    Recebe dados de agendamento do WhatsApp e insere no Supabase
    """
    try:
        supabase = get_supabase_client()
        
        # Inserir no Supabase
        response = supabase.table("agendamentos_ai").insert({
            "nome": agendamento.nome,
            "endereco": agendamento.endereco,
            "equipamento": agendamento.equipamento,
            "problema": agendamento.problema,
            "urgente": agendamento.urgente.lower() in ['sim', 'true', 'urgente'],
            "telefone": agendamento.telefone,
            "cpf": agendamento.cpf,
            "email": agendamento.email,
            "status": "pendente",
            "origem": "whatsapp"
        }).execute()
        
        logger.info(f"Agendamento inserido: {response}")
        
        return {
            "sucesso": True,
            "mensagem": "SISTEMA ANTIGO - Agendamento registrado com sucesso. Em breve nossa equipe ir√° roteirizar o melhor hor√°rio e retornar√° a confirma√ß√£o üòä"
        }
        
    except Exception as e:
        logger.error(f"Erro ao inserir agendamento: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao processar agendamento: {str(e)}"
        }

@app.get("/api/status")
async def api_status():
    """Endpoint de verifica√ß√£o de sa√∫de da API"""
    return {"status": "online", "timestamp": datetime.now().isoformat()}

@app.post("/agendamento")
async def agendamento_alternativo(request: Request):
    """Endpoint alternativo para compatibilidade com configura√ß√µes anteriores"""
    try:
        data = await request.json()
        agendamento = Agendamento(**data)
        return await receber_dados(agendamento)
    except Exception as e:
        logger.error(f"Erro no endpoint alternativo: {e}")
        return {"sucesso": False, "mensagem": f"Erro: {str(e)}"}

@app.get("/agendamento-inteligente")
async def agendamento_inteligente_get():
    """Endpoint para verificar se o servi√ßo de agendamento inteligente est√° online"""
    return {"status": "online", "message": "Servi√ßo de agendamento inteligente ativo"}

@app.post("/agendamento-inteligente")
async def agendamento_inteligente(request: Request):
    """üöÄ SISTEMA DE AGENDAMENTO INTELIGENTE V4.1 - CLIENTECHAT DUAS ETAPAS COM DEBUG üöÄ"""
    try:
        data = await request.json()
        logger.info(f"üöÄ SISTEMA V4.1 - dados recebidos: {data}")

        # DETECTAR QUAL ETAPA EXECUTAR
        horario_escolhido = data.get("horario_escolhido", "").strip()

        logger.info(f"üîç DEBUG ETAPA - horario_escolhido RAW: '{data.get('horario_escolhido')}'")
        logger.info(f"üîç DEBUG ETAPA - horario_escolhido STRIP: '{horario_escolhido}'")
        logger.info(f"üîç DEBUG ETAPA - not horario_escolhido: {not horario_escolhido}")
        logger.info(f"üîç DEBUG ETAPA - bool(horario_escolhido): {bool(horario_escolhido)}")
        logger.info(f"üîç DEBUG ETAPA - len(horario_escolhido): {len(horario_escolhido)}")

        if not horario_escolhido:
            # ETAPA 1: CONSULTAR DISPONIBILIDADE
            logger.info("üöÄ EXECUTANDO ETAPA 1: Consulta de disponibilidade")
            return await consultar_disponibilidade_v4(data)
        else:
            # ETAPA 2: CONFIRMAR AGENDAMENTO
            logger.info("üöÄ EXECUTANDO ETAPA 2: Confirma√ß√£o de agendamento")
            logger.info(f"üéØ PRESTES A CHAMAR confirmar_agendamento_v4 com data={data} e horario_escolhido='{horario_escolhido}'")
            resultado = await confirmar_agendamento_v4(data, horario_escolhido)
            logger.info(f"üéØ RESULTADO DA CHAMADA: {resultado}")
            return resultado

    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        logger.error(f"üö® EXCE√á√ÉO CAPTURADA NO AGENDAMENTO INTELIGENTE: {e}")
        logger.error(f"üö® TRACEBACK COMPLETO: {error_details}")
        return JSONResponse(
            status_code=500,
            content={"sucesso": False, "mensagem": f"Erro interno: {str(e)}"}
        )

async def processar_mensagem_clientechat(data: dict):
    """ü§ñ PROCESSAR MENSAGEM DO CLIENTECHAT - DUAS ETAPAS AUTOM√ÅTICAS"""
    try:
        mensagem = data.get('message', '').strip()
        telefone = data.get('phone', '').replace('+', '').replace(' ', '').replace('-', '')

        logger.info(f"üì± ClienteChat - Telefone: {telefone}")
        logger.info(f"üí¨ ClienteChat - Mensagem: {mensagem}")

        # ETAPA 2: DETECTAR ESCOLHA DE HOR√ÅRIO (n√∫meros 1, 2 ou 3)
        if mensagem in ['1', '2', '3']:
            logger.info(f"üéØ ClienteChat - ETAPA 2: Escolha de hor√°rio {mensagem}")
            return await processar_escolha_horario_clientechat(telefone, mensagem)

        # ETAPA 1: DETECTAR DADOS COMPLETOS PARA AGENDAMENTO
        if all(campo in mensagem.lower() for campo in ['nome', 'endere√ßo', 'cpf', 'e-mail']):
            logger.info("üéØ ClienteChat - ETAPA 1: Consulta de disponibilidade")
            return await processar_primeira_consulta_clientechat(mensagem, telefone)

        # MENSAGEM INCOMPLETA
        return {
            "response": "‚ùå Para agendar, preciso dos seguintes dados:\n\n1Ô∏è‚É£ Nome completo\n2Ô∏è‚É£ Endere√ßo completo com CEP e complemento (se tiver)\n3Ô∏è‚É£ CPF\n4Ô∏è‚É£ E-mail\n\nAssim que eu tiver esses dados, podemos prosseguir com o agendamento!"
        }

    except Exception as e:
        logger.error(f"‚ùå ClienteChat - Erro: {e}")
        return {
            "response": f"‚ùå Erro ao processar sua mensagem: {str(e)}"
        }

async def processar_primeira_consulta_clientechat(mensagem: str, telefone: str):
    """üéØ ETAPA 1: PROCESSAR DADOS E CONSULTAR HOR√ÅRIOS DISPON√çVEIS"""
    try:
        # Extrair dados da mensagem usando regex ou parsing simples
        dados_extraidos = extrair_dados_mensagem(mensagem)

        if not dados_extraidos:
            return {
                "response": "‚ùå N√£o consegui extrair todos os dados necess√°rios. Por favor, envie:\n\n1Ô∏è‚É£ Nome completo\n2Ô∏è‚É£ Endere√ßo completo com CEP\n3Ô∏è‚É£ CPF\n4Ô∏è‚É£ E-mail"
            }

        # Adicionar telefone aos dados
        dados_extraidos['telefone'] = telefone

        # Consultar hor√°rios dispon√≠veis usando a l√≥gica existente
        resultado = await consultar_disponibilidade_v4(dados_extraidos)

        # Retornar hor√°rios formatados para ClienteChat
        if resultado.get('sucesso'):
            horarios = resultado.get('horarios_disponiveis', [])
            if horarios:
                # Salvar dados E hor√°rios temporariamente para a segunda etapa
                dados_extraidos['horarios_disponiveis'] = horarios
                await salvar_dados_temporarios(telefone, dados_extraidos)

                response = "‚úÖ Encontrei hor√°rios dispon√≠veis para voc√™:\n\n"
                for i, horario in enumerate(horarios[:3], 1):  # M√°ximo 3 op√ß√µes
                    if isinstance(horario, dict):
                        response += f"{i}Ô∏è‚É£ {horario.get('texto', horario)}\n"
                    else:
                        response += f"{i}Ô∏è‚É£ {horario}\n"
                response += "\nüì± Responda com o n√∫mero da op√ß√£o desejada (1, 2 ou 3)"
                return {"response": response}
            else:
                return {"response": "‚ùå N√£o encontrei hor√°rios dispon√≠veis no momento. Tente novamente mais tarde."}
        else:
            return {"response": f"‚ùå {resultado.get('mensagem', 'Erro ao consultar hor√°rios')}"}

    except Exception as e:
        logger.error(f"‚ùå Erro na primeira consulta ClienteChat: {e}")
        return {"response": f"‚ùå Erro ao processar consulta: {str(e)}"}

async def processar_escolha_horario_clientechat(telefone: str, escolha: str):
    """üéØ ETAPA 2: PROCESSAR ESCOLHA DE HOR√ÅRIO E CRIAR AGENDAMENTO"""
    try:
        # Recuperar dados salvos temporariamente
        dados_salvos = await recuperar_dados_temporarios(telefone)

        if not dados_salvos:
            return {
                "response": "‚ùå N√£o encontrei seus dados. Por favor, inicie o agendamento novamente com seus dados completos."
            }

        # Recuperar hor√°rios dispon√≠veis salvos
        horarios_disponiveis = dados_salvos.get('horarios_disponiveis', [])

        if not horarios_disponiveis:
            return {
                "response": "‚ùå N√£o encontrei os hor√°rios dispon√≠veis. Por favor, inicie o agendamento novamente."
            }

        # Converter escolha num√©rica em hor√°rio real
        try:
            indice = int(escolha) - 1  # Converter 1,2,3 para 0,1,2
            if indice < 0 or indice >= len(horarios_disponiveis):
                return {
                    "response": f"‚ùå Op√ß√£o inv√°lida. Escolha entre 1 e {len(horarios_disponiveis)}."
                }

            horario_obj = horarios_disponiveis[indice]

            # Extrair o datetime do hor√°rio escolhido
            if isinstance(horario_obj, dict):
                horario_escolhido = horario_obj.get('datetime_agendamento', horario_obj.get('texto', str(horario_obj)))
            else:
                horario_escolhido = str(horario_obj)

            logger.info(f"üéØ Hor√°rio escolhido: {horario_escolhido}")

        except ValueError:
            return {
                "response": "‚ùå Por favor, envie apenas o n√∫mero da op√ß√£o (1, 2 ou 3)."
            }

        # Adicionar hor√°rio escolhido aos dados
        dados_salvos['horario_escolhido'] = horario_escolhido

        # Confirmar agendamento usando a l√≥gica existente
        resultado = await confirmar_agendamento_v4(dados_salvos, horario_escolhido)

        # Limpar dados tempor√°rios
        await limpar_dados_temporarios(telefone)

        # Retornar confirma√ß√£o formatada para ClienteChat
        if resultado.get('sucesso'):
            return {"response": f"‚úÖ {resultado.get('mensagem', 'Agendamento confirmado com sucesso!')}"}
        else:
            return {"response": f"‚ùå {resultado.get('mensagem', 'Erro ao confirmar agendamento')}"}

    except Exception as e:
        logger.error(f"‚ùå Erro na escolha de hor√°rio ClienteChat: {e}")
        return {"response": f"‚ùå Erro ao processar escolha: {str(e)}"}

# FUN√á√ïES AUXILIARES PARA CLIENTECHAT
import re

# Armazenamento tempor√°rio em mem√≥ria (em produ√ß√£o, usar Redis ou banco)
dados_temporarios = {}

def extrair_dados_mensagem(mensagem: str) -> dict:
    """Extrair dados estruturados da mensagem do cliente"""
    try:
        dados = {}

        # Extrair nome (primeira linha ou ap√≥s "nome:")
        nome_match = re.search(r'nome[:\s]+([^\n]+)', mensagem, re.IGNORECASE)
        if nome_match:
            dados['nome'] = nome_match.group(1).strip()

        # Extrair endere√ßo
        endereco_match = re.search(r'endere[√ßc]o[:\s]+([^\n]+)', mensagem, re.IGNORECASE)
        if endereco_match:
            dados['endereco'] = endereco_match.group(1).strip()

        # Extrair CPF
        cpf_match = re.search(r'cpf[:\s]+([0-9.-]+)', mensagem, re.IGNORECASE)
        if cpf_match:
            dados['cpf'] = cpf_match.group(1).strip()

        # Extrair email
        email_match = re.search(r'e-?mail[:\s]+([^\s\n]+@[^\s\n]+)', mensagem, re.IGNORECASE)
        if email_match:
            dados['email'] = email_match.group(1).strip()

        # Extrair equipamento (opcional)
        equipamento_match = re.search(r'equipamento[:\s]+([^\n]+)', mensagem, re.IGNORECASE)
        if equipamento_match:
            dados['equipamento'] = equipamento_match.group(1).strip()
        else:
            dados['equipamento'] = 'Fog√£o'  # Padr√£o

        # Validar se tem dados m√≠nimos
        if all(key in dados for key in ['nome', 'endereco', 'cpf', 'email']):
            return dados
        else:
            return None

    except Exception as e:
        logger.error(f"‚ùå Erro ao extrair dados: {e}")
        return None

async def salvar_dados_temporarios(telefone: str, dados: dict):
    """Salvar dados temporariamente para a segunda etapa"""
    dados_temporarios[telefone] = {
        'dados': dados,
        'timestamp': datetime.now().isoformat()
    }
    logger.info(f"üíæ Dados salvos para {telefone}")

async def recuperar_dados_temporarios(telefone: str) -> dict:
    """Recuperar dados salvos temporariamente"""
    if telefone in dados_temporarios:
        dados_salvos = dados_temporarios[telefone]['dados']
        logger.info(f"üìÇ Dados recuperados para {telefone}")
        return dados_salvos
    return None

async def limpar_dados_temporarios(telefone: str):
    """Limpar dados tempor√°rios ap√≥s uso"""
    if telefone in dados_temporarios:
        del dados_temporarios[telefone]
        logger.info(f"üóëÔ∏è Dados limpos para {telefone}")

async def consultar_disponibilidade_simples(data: dict):
    """ETAPA 1: Consultar hor√°rios dispon√≠veis"""
    try:
        # Extrair dados b√°sicos
        nome = data.get("nome", "").strip()
        endereco = data.get("endereco", "").strip()
        equipamento = data.get("equipamento", "").strip()

        # Validar dados obrigat√≥rios
        if not nome or not endereco or not equipamento:
            return {
                "sucesso": False,
                "mensagem": "Nome, endere√ßo e equipamento s√£o obrigat√≥rios"
            }

        # Gerar hor√°rios dispon√≠veis (pr√≥ximos 3 dias √∫teis)
        horarios_disponiveis = []
        data_atual = datetime.now()

        # Pular fins de semana
        while len(horarios_disponiveis) < 3:
            data_atual += timedelta(days=1)
            if data_atual.weekday() < 5:  # Segunda a sexta
                # Hor√°rios: 9h, 14h, 16h
                for hora in [9, 14, 16]:
                    horario_dt = data_atual.replace(hour=hora, minute=0, second=0, microsecond=0)
                    horarios_disponiveis.append({
                        "numero": len(horarios_disponiveis) + 1,
                        "texto": f"{horario_dt.strftime('%d/%m')} √†s {horario_dt.strftime('%H:%M')}",
                        "datetime_agendamento": horario_dt.isoformat()
                    })
                    if len(horarios_disponiveis) >= 3:
                        break

        # Resposta para o cliente
        mensagem = f"‚úÖ Encontrei hor√°rios dispon√≠veis para {equipamento}:"
        mensagem += "\n\n"
        for h in horarios_disponiveis:
            mensagem += f"{h['numero']}. {h['texto']}"
            mensagem += "\n"

        mensagem += "\nResponda com o n√∫mero da op√ß√£o desejada (1, 2 ou 3)."

        return {
            "sucesso": True,
            "mensagem": mensagem,
            "horarios": horarios_disponiveis,
            "action": "select_time"
        }

    except Exception as e:
        logger.error(f"Erro ao consultar disponibilidade: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao processar consulta: {str(e)}"
        }

async def confirmar_agendamento_simples(data: dict, horario_escolhido: str):
    """ETAPA 2: Confirmar agendamento"""
    try:
        supabase = get_supabase_client()

        # Extrair dados b√°sicos
        nome = data.get("nome", "").strip()
        endereco = data.get("endereco", "").strip()
        equipamento = data.get("equipamento", "").strip()
        telefone = data.get("telefone", "").strip()
        problema = data.get("problema", "N√£o especificado").strip()

        # Processar hor√°rio escolhido
        try:
            horario_dt = datetime.fromisoformat(horario_escolhido)
        except:
            return {
                "sucesso": False,
                "mensagem": "Formato de hor√°rio inv√°lido"
            }

        # Criar pr√©-agendamento
        agendamento_data = {
            "nome": nome,
            "telefone": telefone,
            "endereco": endereco,
            "equipamento": equipamento,
            "problema": problema,
            "data_agendada": horario_dt.isoformat(),
            "tecnico": "A definir",
            "urgente": False,
            "status": "confirmado",
            "origem": "clientechat_inteligente"
        }

        response = supabase.table("agendamentos_ai").insert(agendamento_data).execute()

        if not response.data:
            raise Exception("Erro ao criar agendamento")

        agendamento_id = response.data[0]["id"]

        # Resposta de confirma√ß√£o
        mensagem = f"‚úÖ *Agendamento Confirmado!*\n\n"
        mensagem += f"üìã *ID:* #{agendamento_id}\n"
        mensagem += f"üë§ *Cliente:* {nome}\n"
        mensagem += f"üìç *Endere√ßo:* {endereco}\n"
        mensagem += f"üîß *Equipamento:* {equipamento}\n"
        mensagem += f"üìÖ *Data:* {horario_dt.strftime('%d/%m/%Y')}\n"
        mensagem += f"‚è∞ *Hor√°rio:* {horario_dt.strftime('%H:%M')}\n"
        mensagem += f"üì± *Contato:* (48) 98833-2664\n\n"
        mensagem += f"Voc√™ receber√° uma confirma√ß√£o por WhatsApp 1 dia antes do atendimento."

        return {
            "sucesso": True,
            "mensagem": mensagem,
            "agendamento_id": agendamento_id
        }

    except Exception as e:
        logger.error(f"Erro ao confirmar agendamento: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao confirmar agendamento: {str(e)}"
        }

@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de para monitoramento"""
    return {
        "status": "healthy",
        "environment": {
            "SUPABASE_URL": "Definida" if os.getenv("SUPABASE_URL") else "N√£o definida",
            "SUPABASE_KEY": "Definida" if os.getenv("SUPABASE_KEY") else "N√£o definida"
        }
    }

# NOVO ENDPOINT - SISTEMA INTELIGENTE V4.0
@app.post("/agendamento-v4")
async def agendamento_inteligente_v4(request: Request):
    """SISTEMA DE AGENDAMENTO INTELIGENTE V4.0 - ENDPOINT NOVO"""
    try:
        data = await request.json()
        logger.info(f"üöÄ SISTEMA V4.0 - dados recebidos: {data}")

        # DETECTAR QUAL ETAPA EXECUTAR
        horario_escolhido = data.get("horario_escolhido", "").strip()
        logger.info(f"üöÄ SISTEMA V4.0 - horario_escolhido: '{horario_escolhido}'")

        if not horario_escolhido:
            # ETAPA 1: CONSULTAR DISPONIBILIDADE
            logger.info("üöÄ SISTEMA V4.0 - Executando ETAPA 1: Consulta de disponibilidade")
            return await consultar_disponibilidade_v4(data)
        else:
            # ETAPA 2: CONFIRMAR AGENDAMENTO
            logger.info("üöÄ SISTEMA V4.0 - Executando ETAPA 2: Confirma√ß√£o de agendamento")
            return await confirmar_agendamento_v4(data, horario_escolhido)

    except Exception as e:
        logger.error(f"üöÄ SISTEMA V4.0 - Erro: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao processar agendamento V4.0: {str(e)}"
        }

async def consultar_disponibilidade_v4(data: dict):
    """ETAPA 1: Consultar hor√°rios dispon√≠veis - V4.0"""
    try:
        # Extrair dados b√°sicos
        nome = data.get("nome", "").strip()
        endereco = data.get("endereco", "").strip()
        equipamento = data.get("equipamento", "").strip()

        # Validar dados obrigat√≥rios
        if not nome or not endereco or not equipamento:
            return {
                "sucesso": False,
                "mensagem": "Nome, endere√ßo e equipamento s√£o obrigat√≥rios"
            }

        # Gerar hor√°rios dispon√≠veis (pr√≥ximos 3 dias √∫teis)
        horarios_disponiveis = []
        data_atual = datetime.now()

        # Pular fins de semana
        while len(horarios_disponiveis) < 3:
            data_atual += timedelta(days=1)
            if data_atual.weekday() < 5:  # Segunda a sexta
                # Hor√°rios: 9h, 14h, 16h
                for hora in [9, 14, 16]:
                    horario_dt = data_atual.replace(hour=hora, minute=0, second=0, microsecond=0)
                    horarios_disponiveis.append({
                        "numero": len(horarios_disponiveis) + 1,
                        "texto": f"{horario_dt.strftime('%d/%m')} √†s {horario_dt.strftime('%H:%M')}",
                        "datetime_agendamento": horario_dt.isoformat()
                    })
                    if len(horarios_disponiveis) >= 3:
                        break

        # Resposta para o cliente
        mensagem = f"‚úÖ Encontrei hor√°rios dispon√≠veis para {equipamento}:"
        mensagem += "\n\n"
        for h in horarios_disponiveis:
            mensagem += f"{h['numero']}. {h['texto']}"
            mensagem += "\n"

        mensagem += "\nResponda com o n√∫mero da op√ß√£o desejada (1, 2 ou 3)."

        return {
            "sucesso": True,
            "mensagem": mensagem,
            "horarios_disponiveis": horarios_disponiveis,
            "action": "select_time",
            "version": "4.0"
        }

    except Exception as e:
        logger.error(f"üöÄ V4.0 - Erro ao consultar disponibilidade: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao processar consulta V4.0: {str(e)}"
        }

async def confirmar_agendamento_v4(data: dict, horario_escolhido: str):
    """ETAPA 2: Confirmar agendamento - V4.0"""
    try:
        supabase = get_supabase_client()

        # Extrair dados b√°sicos
        nome = data.get("nome", "").strip()
        endereco = data.get("endereco", "").strip()
        equipamento = data.get("equipamento", "").strip()
        telefone = data.get("telefone", "").strip()
        problema = data.get("problema", "N√£o especificado").strip()

        # Determinar t√©cnico e grupo log√≠stico
        tecnico = determinar_tecnico(equipamento)
        grupo_logistico = determinar_grupo_logistico(endereco)
        urgente = data.get("urgente", "n√£o")
        if isinstance(urgente, str):
            urgente = urgente.lower() in ['sim', 'true', 'urgente', '1', 'yes']

        # Gerar hor√°rios dispon√≠veis para processar a escolha
        horarios_disponiveis = await gerar_horarios_disponiveis_v4(tecnico, grupo_logistico, urgente)

        # Processar hor√°rio escolhido (aceita 1, 2, 3 ou ISO)
        horario_iso = processar_escolha_horario(horario_escolhido, horarios_disponiveis)

        if not horario_iso:
            return {
                "sucesso": False,
                "mensagem": "Op√ß√£o de hor√°rio inv√°lida. Por favor, escolha 1, 2 ou 3."
            }

        # Converter para datetime
        try:
            horario_dt = datetime.fromisoformat(horario_iso)
        except:
            return {
                "sucesso": False,
                "mensagem": "Formato de hor√°rio inv√°lido"
            }

        # Criar pr√©-agendamento
        agendamento_data = {
            "nome": nome,
            "telefone": telefone,
            "endereco": endereco,
            "equipamento": equipamento,
            "problema": problema,
            "data_agendada": horario_dt.isoformat(),
            "tecnico": "A definir",
            "urgente": False,
            "status": "confirmado",
            "origem": "clientechat_v4"
        }

        response = supabase.table("agendamentos_ai").insert(agendamento_data).execute()

        if not response.data:
            raise Exception("Erro ao criar agendamento")

        agendamento_id = response.data[0]["id"]

        # Resposta de confirma√ß√£o
        mensagem = f"‚úÖ *Agendamento Confirmado V4.0!*\n\n"
        mensagem += f"üìã *ID:* #{agendamento_id}\n"
        mensagem += f"üë§ *Cliente:* {nome}\n"
        mensagem += f"üìç *Endere√ßo:* {endereco}\n"
        mensagem += f"üîß *Equipamento:* {equipamento}\n"
        mensagem += f"üìÖ *Data:* {horario_dt.strftime('%d/%m/%Y')}\n"
        mensagem += f"‚è∞ *Hor√°rio:* {horario_dt.strftime('%H:%M')}\n"
        mensagem += f"üì± *Contato:* (48) 98833-2664\n\n"
        mensagem += f"Voc√™ receber√° uma confirma√ß√£o por WhatsApp 1 dia antes do atendimento."

        return {
            "sucesso": True,
            "mensagem": mensagem,
            "agendamento_id": agendamento_id,
            "version": "4.0"
        }

    except Exception as e:
        logger.error(f"üöÄ V4.0 - Erro ao confirmar agendamento: {e}")
        return {
            "sucesso": False,
            "mensagem": f"Erro ao confirmar agendamento V4.0: {str(e)}"
        }

# Endpoint para consultar disponibilidade
@app.post("/consultar-disponibilidade")
async def consultar_disponibilidade(request: Request):
    try:
        data = await request.json()
        logger.info(f"Consultando disponibilidade: {data}")

        # Extrair dados b√°sicos
        endereco = data.get("endereco", "").strip()
        nome = data.get("nome", "").strip()
        telefone = data.get("telefone", "").strip()
        equipamento = data.get("equipamento", "").strip()
        problema = data.get("problema", "").strip()

        # Validar dados obrigat√≥rios
        if not nome:
            return JSONResponse(
                status_code=400,
                content={"success": False, "message": "Nome √© obrigat√≥rio"}
            )
        if not endereco:
            return JSONResponse(
                status_code=400,
                content={"success": False, "message": "Endere√ßo √© obrigat√≥rio"}
            )
        if not telefone:
            return JSONResponse(
                status_code=400,
                content={"success": False, "message": "Telefone √© obrigat√≥rio"}
            )
        if not equipamento:
            return JSONResponse(
                status_code=400,
                content={"success": False, "message": "Equipamento √© obrigat√≥rio"}
            )

        # Determinar t√©cnico baseado no equipamento
        tecnico = determinar_tecnico(equipamento)

        # Determinar grupo log√≠stico
        grupo_logistico = determinar_grupo_logistico(endereco)

        # Determinar urg√™ncia
        urgente = data.get("urgente", "n√£o")
        if isinstance(urgente, str):
            urgente = urgente.lower() in ['sim', 'true', 'urgente', '1', 'yes']
        elif isinstance(urgente, bool):
            urgente = urgente
        else:
            urgente = False

        # Gerar hor√°rios dispon√≠veis
        horarios_disponiveis = await gerar_horarios_disponiveis_v4(
            tecnico, grupo_logistico, urgente
        )

        if not horarios_disponiveis:
            return JSONResponse(
                status_code=200,
                content={
                    "success": True,
                    "message": "‚ö†Ô∏è N√£o h√° hor√°rios dispon√≠veis no momento. Nossa equipe entrar√° em contato para agendar.",
                    "horarios_disponiveis": [],
                    "action": "contact_later"
                }
            )

        # Formatar resposta para o cliente
        mensagem = f"‚úÖ Encontrei hor√°rios dispon√≠veis para {equipamento}:\n\n"
        for i, horario in enumerate(horarios_disponiveis[:3], 1):
            mensagem += f"{i}. {horario['texto']}\n"

        mensagem += "\nResponda com o n√∫mero da op√ß√£o desejada (1, 2 ou 3)."

        return JSONResponse(
            status_code=200,
            content={
                "success": True,
                "message": mensagem,
                "horarios_disponiveis": horarios_disponiveis[:3],
                "tecnico": tecnico,
                "urgente": urgente,
                "action": "select_time",
                "dados_cliente": {
                    "nome": nome,
                    "endereco": endereco,
                    "telefone": telefone,
                    "cpf": data.get("cpf", ""),
                    "email": data.get("email", "")
                },
                "equipamento": equipamento,
                "problema": problema
            }
        )

    except Exception as e:
        logger.error(f"Erro ao consultar disponibilidade: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "message": f"Erro ao consultar disponibilidade: {str(e)}"}
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
