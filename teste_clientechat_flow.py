#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do fluxo completo do ClienteChat com Fix Fog√µes
Simula o comportamento da neural chain
"""

import requests
import json
import time

# Configura√ß√µes
BASE_URL = "https://fix-agendamento-production.up.railway.app"
ENDPOINT = "/agendamento-inteligente"

def teste_etapa_1_consulta():
    """Testa ETAPA 1: Consulta de disponibilidade"""
    print("üîç ETAPA 1: Consultando disponibilidade...")
    
    dados = {
        "nome": "Cliente Teste",
        "endereco": "Centro, Florian√≥polis SC",
        "equipamento": "Fog√£o",
        "problema": "N√£o acende",
        "telefone": "48999999999",
        "email": "teste@email.com"
    }
    
    try:
        response = requests.post(f"{BASE_URL}{ENDPOINT}", json=dados)
        result = response.json()
        
        print(f"‚úÖ Status: {response.status_code}")
        print(f"üìã Resposta: {result.get('mensagem', 'Sem mensagem')}")
        
        if result.get('sucesso'):
            horarios = result.get('horarios_disponiveis', [])
            print(f"‚è∞ Hor√°rios dispon√≠veis: {len(horarios)}")
            for i, horario in enumerate(horarios, 1):
                print(f"   {i}. {horario.get('texto', 'N/A')}")
            
            return result, horarios
        else:
            print(f"‚ùå Erro: {result.get('mensagem')}")
            return None, []
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None, []

def teste_etapa_2_confirmacao(dados_originais, opcao_escolhida="1"):
    """Testa ETAPA 2: Confirma√ß√£o do agendamento"""
    print(f"\n‚úÖ ETAPA 2: Confirmando agendamento (op√ß√£o {opcao_escolhida})...")
    
    dados = dados_originais.copy()
    dados["horario_escolhido"] = opcao_escolhida
    
    try:
        response = requests.post(f"{BASE_URL}{ENDPOINT}", json=dados)
        result = response.json()
        
        print(f"‚úÖ Status: {response.status_code}")
        print(f"üìã Resposta: {result.get('mensagem', 'Sem mensagem')}")
        
        if result.get('sucesso'):
            print("üéâ Agendamento confirmado com sucesso!")
            if 'order_number' in result:
                print(f"üìã OS: {result['order_number']}")
        else:
            print(f"‚ùå Erro: {result.get('mensagem')}")
            
        return result
        
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def teste_cenarios_diferentes():
    """Testa diferentes cen√°rios de equipamentos e locais"""
    cenarios = [
        {
            "nome": "Jo√£o Silva",
            "endereco": "S√£o Jos√©, SC",
            "equipamento": "Coifa",
            "problema": "N√£o aspira",
            "telefone": "48988776655",
            "descricao": "Coifa em S√£o Jos√© (Grupo B, T√©cnico Marcelo)"
        },
        {
            "nome": "Maria Santos", 
            "endereco": "Palho√ßa, SC",
            "equipamento": "Forno",
            "problema": "N√£o aquece",
            "telefone": "48977665544",
            "urgente": "sim",
            "descricao": "Forno urgente em Palho√ßa (Grupo B, Paulo Cesar)"
        },
        {
            "nome": "Pedro Costa",
            "endereco": "Balne√°rio Cambori√∫, SC", 
            "equipamento": "Fog√£o",
            "problema": "Queimador entupido",
            "telefone": "48966554433",
            "descricao": "Fog√£o no litoral (Grupo C)"
        }
    ]
    
    print("\nüß™ TESTANDO DIFERENTES CEN√ÅRIOS:")
    print("=" * 50)
    
    for i, cenario in enumerate(cenarios, 1):
        print(f"\nüìã CEN√ÅRIO {i}: {cenario['descricao']}")
        print("-" * 30)
        
        # Remover descri√ß√£o dos dados
        dados = {k: v for k, v in cenario.items() if k != 'descricao'}
        
        try:
            response = requests.post(f"{BASE_URL}{ENDPOINT}", json=dados)
            result = response.json()
            
            if result.get('sucesso'):
                print(f"‚úÖ Sucesso: {result.get('mensagem', '')[:100]}...")
                horarios = result.get('horarios_disponiveis', [])
                print(f"‚è∞ {len(horarios)} hor√°rios dispon√≠veis")
            else:
                print(f"‚ùå Erro: {result.get('mensagem')}")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        time.sleep(1)  # Pausa entre testes

def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO SISTEMA FIX FOG√ïES")
    print("=" * 50)
    
    # Teste do fluxo completo
    dados_teste = {
        "nome": "Cliente Teste Completo",
        "endereco": "Centro, Florian√≥polis SC", 
        "equipamento": "Fog√£o",
        "problema": "N√£o acende",
        "telefone": "48999999999",
        "email": "teste@email.com"
    }
    
    # ETAPA 1
    resultado_1, horarios = teste_etapa_1_consulta()
    
    if resultado_1 and horarios:
        time.sleep(2)
        # ETAPA 2
        resultado_2 = teste_etapa_2_confirmacao(dados_teste, "1")
    
    # Testes de cen√°rios
    time.sleep(3)
    teste_cenarios_diferentes()
    
    print("\nüèÅ TESTES CONCLU√çDOS!")

if __name__ == "__main__":
    main()
